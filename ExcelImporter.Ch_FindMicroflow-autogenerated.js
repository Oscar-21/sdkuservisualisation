(function (unit, model) {

	/*
	 * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
	 * from unit with id "c49ff244-51c2-4861-b2c0-5caac5e4a0b4" of type Microflows$Microflow
	 * in working copy "SoccerSquad"
	 * on 20-12-2024.
	 */

	var startEvent1 = microflows.StartEvent.create(model);
	startEvent1.relativeMiddlePoint = {"x":100,"y":200};
	startEvent1.size = {"width":20,"height":20};

	var expressionSplitCondition1 = microflows.ExpressionSplitCondition.create(model);
	expressionSplitCondition1.expression = "$Column/FindMicroflow != empty and $Column/FindMicroflow != ''";

	var exclusiveSplit1 = microflows.ExclusiveSplit.create(model);
	exclusiveSplit1.relativeMiddlePoint = {"x":225,"y":200};
	exclusiveSplit1.size = {"width":110,"height":50};
	exclusiveSplit1.splitCondition = expressionSplitCondition1;   // Note: for this property a default value is defined.
	exclusiveSplit1.caption = "has mf search string";

	var objectType1 = datatypes.ObjectType.create(model);
	objectType1.entity = model.findEntityByQualifiedName("ExcelImporter.Column");

	var column1 = microflows.MicroflowParameterObject.create(model);
	column1.relativeMiddlePoint = {"x":100,"y":105};
	column1.size = {"width":30,"height":30};
	column1.name = "Column";
	column1.variableType = objectType1;   // Note: for this property a default value is defined.

	var microflowCallParameterMapping1 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping1.__parameter.updateWithRawValue("MxModelReflection.FindMicroflow.MicroflowSearchString");
	microflowCallParameterMapping1.argument = "$Column/FindMicroflow";

	var microflowCall1 = microflows.MicroflowCall.create(model);
	microflowCall1.microflow = model.findMicroflowByQualifiedName("MxModelReflection.FindMicroflow");
	microflowCall1.parameterMappings.push(microflowCallParameterMapping1);

	var microflowCallAction1 = microflows.MicroflowCallAction.create(model);
	microflowCallAction1.microflowCall = microflowCall1;   // Note: for this property a default value is defined.
	microflowCallAction1.outputVariableName = "Microflow";

	var actionActivity1 = microflows.ActionActivity.create(model);
	actionActivity1.relativeMiddlePoint = {"x":420,"y":200};
	actionActivity1.size = {"width":130,"height":60};
	actionActivity1.action = microflowCallAction1;
	actionActivity1.caption = "Try to find a microflow by the search string";
	actionActivity1.autoGenerateCaption = false;

	var expressionSplitCondition2 = microflows.ExpressionSplitCondition.create(model);
	expressionSplitCondition2.expression = "$Microflow != empty";

	var exclusiveSplit2 = microflows.ExclusiveSplit.create(model);
	exclusiveSplit2.relativeMiddlePoint = {"x":555,"y":200};
	exclusiveSplit2.size = {"width":60,"height":40};
	exclusiveSplit2.splitCondition = expressionSplitCondition2;   // Note: for this property a default value is defined.
	exclusiveSplit2.caption = "found?";

	var endEvent1 = microflows.EndEvent.create(model);
	endEvent1.relativeMiddlePoint = {"x":225,"y":370};
	endEvent1.size = {"width":20,"height":20};

	var memberChange1 = microflows.MemberChange.create(model);
	memberChange1.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_Microflows");
	memberChange1.value = "empty";

	var changeObjectAction1 = microflows.ChangeObjectAction.create(model);
	changeObjectAction1.items.push(memberChange1);
	changeObjectAction1.refreshInClient = true;
	changeObjectAction1.changeVariableName = "Column";

	var actionActivity2 = microflows.ActionActivity.create(model);
	actionActivity2.relativeMiddlePoint = {"x":225,"y":305};
	actionActivity2.size = {"width":100,"height":60};
	actionActivity2.action = changeObjectAction1;
	actionActivity2.caption = "Reset the microflow selection";
	actionActivity2.autoGenerateCaption = false;

	var memberChange2 = microflows.MemberChange.create(model);
	memberChange2.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_Microflows");
	memberChange2.value = "empty";

	var changeObjectAction2 = microflows.ChangeObjectAction.create(model);
	changeObjectAction2.items.push(memberChange2);
	changeObjectAction2.refreshInClient = true;
	changeObjectAction2.changeVariableName = "Column";

	var actionActivity3 = microflows.ActionActivity.create(model);
	actionActivity3.relativeMiddlePoint = {"x":555,"y":400};
	actionActivity3.size = {"width":100,"height":60};
	actionActivity3.action = changeObjectAction2;
	actionActivity3.caption = "Reset the microflow selection";
	actionActivity3.autoGenerateCaption = false;

	var endEvent2 = microflows.EndEvent.create(model);
	endEvent2.relativeMiddlePoint = {"x":555,"y":465};
	endEvent2.size = {"width":20,"height":20};

	var translation1 = texts.Translation.create(model);
	translation1.languageCode = "en_US";
	translation1.text = "No microflow could be found";

	var translation2 = texts.Translation.create(model);
	translation2.languageCode = "nl_NL";
	translation2.text = "Er kon geen microflow gevonden worden";

	var translation3 = texts.Translation.create(model);
	translation3.languageCode = "en_GB";
	translation3.text = "No microflow could be found";

	var translation4 = texts.Translation.create(model);
	translation4.languageCode = "en_ZA";
	translation4.text = "No microflow could be found";

	var text1 = texts.Text.create(model);
	text1.translations.push(translation1);
	text1.translations.push(translation2);
	text1.translations.push(translation3);
	text1.translations.push(translation4);

	var textTemplate1 = microflows.TextTemplate.create(model);
	textTemplate1.text = text1;   // Note: for this property a default value is defined.

	var validationFeedbackAction1 = microflows.ValidationFeedbackAction.create(model);
	validationFeedbackAction1.feedbackTemplate = textTemplate1;   // Note: for this property a default value is defined.
	validationFeedbackAction1.objectVariableName = "Column";
	validationFeedbackAction1.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.FindMicroflow");

	var actionActivity4 = microflows.ActionActivity.create(model);
	actionActivity4.relativeMiddlePoint = {"x":555,"y":305};
	actionActivity4.size = {"width":120,"height":60};
	actionActivity4.action = validationFeedbackAction1;
	actionActivity4.caption = "Show warning nothing found";
	actionActivity4.autoGenerateCaption = false;

	var memberChange3 = microflows.MemberChange.create(model);
	memberChange3.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_Microflows");
	memberChange3.value = "$Microflow";

	var memberChange4 = microflows.MemberChange.create(model);
	memberChange4.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.FindMicroflow");
	memberChange4.value = "$Microflow/CompleteName";

	var changeObjectAction3 = microflows.ChangeObjectAction.create(model);
	changeObjectAction3.items.push(memberChange3);
	changeObjectAction3.items.push(memberChange4);
	changeObjectAction3.refreshInClient = true;
	changeObjectAction3.changeVariableName = "Column";

	var actionActivity5 = microflows.ActionActivity.create(model);
	actionActivity5.relativeMiddlePoint = {"x":715,"y":200};
	actionActivity5.size = {"width":120,"height":60};
	actionActivity5.action = changeObjectAction3;
	actionActivity5.caption = "Set the microflow info";
	actionActivity5.autoGenerateCaption = false;

	var endEvent3 = microflows.EndEvent.create(model);
	endEvent3.relativeMiddlePoint = {"x":825,"y":200};
	endEvent3.size = {"width":20,"height":20};

	var microflowObjectCollection1 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection1.objects.push(startEvent1);
	microflowObjectCollection1.objects.push(exclusiveSplit1);
	microflowObjectCollection1.objects.push(column1);
	microflowObjectCollection1.objects.push(actionActivity1);
	microflowObjectCollection1.objects.push(exclusiveSplit2);
	microflowObjectCollection1.objects.push(endEvent1);
	microflowObjectCollection1.objects.push(actionActivity2);
	microflowObjectCollection1.objects.push(actionActivity3);
	microflowObjectCollection1.objects.push(endEvent2);
	microflowObjectCollection1.objects.push(actionActivity4);
	microflowObjectCollection1.objects.push(actionActivity5);
	microflowObjectCollection1.objects.push(endEvent3);

	var noCase1 = microflows.NoCase.create(model);

	var sequenceFlow1 = microflows.SequenceFlow.create(model);
	sequenceFlow1.originConnectionIndex = 1;
	sequenceFlow1.destinationConnectionIndex = 3;
	sequenceFlow1.originBezierVector = {"width":0,"height":0};
	sequenceFlow1.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow1.caseValue = noCase1;   // Note: for this property a default value is defined.

	var enumerationCase1 = microflows.EnumerationCase.create(model);
	enumerationCase1.value = "true";

	var sequenceFlow2 = microflows.SequenceFlow.create(model);
	sequenceFlow2.originConnectionIndex = 1;
	sequenceFlow2.destinationConnectionIndex = 3;
	sequenceFlow2.originBezierVector = {"width":15,"height":0};
	sequenceFlow2.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow2.caseValue = enumerationCase1;   // Note: for this property a default value is defined.

	var enumerationCase2 = microflows.EnumerationCase.create(model);
	enumerationCase2.value = "false";

	var sequenceFlow3 = microflows.SequenceFlow.create(model);
	sequenceFlow3.originConnectionIndex = 2;
	sequenceFlow3.originBezierVector = {"width":0,"height":15};
	sequenceFlow3.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow3.caseValue = enumerationCase2;   // Note: for this property a default value is defined.

	var noCase2 = microflows.NoCase.create(model);

	var sequenceFlow4 = microflows.SequenceFlow.create(model);
	sequenceFlow4.originConnectionIndex = 2;
	sequenceFlow4.originBezierVector = {"width":0,"height":30};
	sequenceFlow4.destinationBezierVector = {"width":0,"height":-15};
	sequenceFlow4.caseValue = noCase2;   // Note: for this property a default value is defined.

	var noCase3 = microflows.NoCase.create(model);

	var sequenceFlow5 = microflows.SequenceFlow.create(model);
	sequenceFlow5.originConnectionIndex = 1;
	sequenceFlow5.destinationConnectionIndex = 3;
	sequenceFlow5.originBezierVector = {"width":30,"height":0};
	sequenceFlow5.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow5.caseValue = noCase3;   // Note: for this property a default value is defined.

	var enumerationCase3 = microflows.EnumerationCase.create(model);
	enumerationCase3.value = "true";

	var sequenceFlow6 = microflows.SequenceFlow.create(model);
	sequenceFlow6.originConnectionIndex = 1;
	sequenceFlow6.destinationConnectionIndex = 3;
	sequenceFlow6.originBezierVector = {"width":15,"height":0};
	sequenceFlow6.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow6.caseValue = enumerationCase3;   // Note: for this property a default value is defined.

	var noCase4 = microflows.NoCase.create(model);

	var sequenceFlow7 = microflows.SequenceFlow.create(model);
	sequenceFlow7.originConnectionIndex = 1;
	sequenceFlow7.destinationConnectionIndex = 3;
	sequenceFlow7.originBezierVector = {"width":30,"height":0};
	sequenceFlow7.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow7.caseValue = noCase4;   // Note: for this property a default value is defined.

	var noCase5 = microflows.NoCase.create(model);

	var sequenceFlow8 = microflows.SequenceFlow.create(model);
	sequenceFlow8.originConnectionIndex = 2;
	sequenceFlow8.originBezierVector = {"width":0,"height":30};
	sequenceFlow8.destinationBezierVector = {"width":0,"height":-15};
	sequenceFlow8.caseValue = noCase5;   // Note: for this property a default value is defined.

	var enumerationCase4 = microflows.EnumerationCase.create(model);
	enumerationCase4.value = "false";

	var sequenceFlow9 = microflows.SequenceFlow.create(model);
	sequenceFlow9.originConnectionIndex = 2;
	sequenceFlow9.originBezierVector = {"width":0,"height":15};
	sequenceFlow9.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow9.caseValue = enumerationCase4;   // Note: for this property a default value is defined.

	var noCase6 = microflows.NoCase.create(model);

	var sequenceFlow10 = microflows.SequenceFlow.create(model);
	sequenceFlow10.originConnectionIndex = 2;
	sequenceFlow10.originBezierVector = {"width":0,"height":30};
	sequenceFlow10.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow10.caseValue = noCase6;   // Note: for this property a default value is defined.

	var voidType1 = datatypes.VoidType.create(model);

	var translation5 = texts.Translation.create(model);
	translation5.languageCode = "en_US";

	var translation6 = texts.Translation.create(model);
	translation6.languageCode = "en_GB";

	var translation7 = texts.Translation.create(model);
	translation7.languageCode = "en_ZA";

	var text2 = texts.Text.create(model);
	text2.translations.push(translation5);
	text2.translations.push(translation6);
	text2.translations.push(translation7);

	var ch_FindMicroflow1 = microflows.Microflow.createIn(unit);
	ch_FindMicroflow1.name = "Ch_FindMicroflow";
	ch_FindMicroflow1.objectCollection = microflowObjectCollection1;   // Note: for this property a default value is defined.
	ch_FindMicroflow1.flows.push(sequenceFlow1);
	ch_FindMicroflow1.flows.push(sequenceFlow2);
	ch_FindMicroflow1.flows.push(sequenceFlow3);
	ch_FindMicroflow1.flows.push(sequenceFlow4);
	ch_FindMicroflow1.flows.push(sequenceFlow5);
	ch_FindMicroflow1.flows.push(sequenceFlow6);
	ch_FindMicroflow1.flows.push(sequenceFlow7);
	ch_FindMicroflow1.flows.push(sequenceFlow8);
	ch_FindMicroflow1.flows.push(sequenceFlow9);
	ch_FindMicroflow1.flows.push(sequenceFlow10);
	ch_FindMicroflow1.microflowReturnType = voidType1;
	ch_FindMicroflow1.applyEntityAccess = true;
	ch_FindMicroflow1.allowedModuleRoles.push(model.findModuleRoleByQualifiedName("ExcelImporter.Configurator"));
	ch_FindMicroflow1.concurrencyErrorMessage = text2;   // Note: for this property a default value is defined.

	sequenceFlow1.origin = startEvent1;
	sequenceFlow1.destination = exclusiveSplit1;

	sequenceFlow2.origin = exclusiveSplit1;
	sequenceFlow2.destination = actionActivity1;

	sequenceFlow3.origin = exclusiveSplit1;
	sequenceFlow3.destination = actionActivity2;

	sequenceFlow4.origin = actionActivity2;
	sequenceFlow4.destination = endEvent1;

	sequenceFlow5.origin = actionActivity1;
	sequenceFlow5.destination = exclusiveSplit2;

	sequenceFlow6.origin = exclusiveSplit2;
	sequenceFlow6.destination = actionActivity5;

	sequenceFlow7.origin = actionActivity5;
	sequenceFlow7.destination = endEvent3;

	sequenceFlow8.origin = actionActivity3;
	sequenceFlow8.destination = endEvent2;

	sequenceFlow9.origin = exclusiveSplit2;
	sequenceFlow9.destination = actionActivity4;

	sequenceFlow10.origin = actionActivity4;
	sequenceFlow10.destination = actionActivity3;

})