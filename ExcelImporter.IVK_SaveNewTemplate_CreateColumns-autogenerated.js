(function (unit, model) {

	/*
	 * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
	 * from unit with id "24f6359f-f47a-4ae6-ba10-a09d5a90342f" of type Microflows$Microflow
	 * in working copy "SoccerSquad"
	 * on 20-12-2024.
	 */

	var startEvent1 = microflows.StartEvent.create(model);
	startEvent1.relativeMiddlePoint = {"x":-115,"y":200};
	startEvent1.size = {"width":20,"height":20};

	var objectType1 = datatypes.ObjectType.create(model);
	objectType1.entity = model.findEntityByQualifiedName("ExcelImporter.Template");

	var template1 = microflows.MicroflowParameterObject.create(model);
	template1.relativeMiddlePoint = {"x":-115,"y":110};
	template1.size = {"width":30,"height":30};
	template1.name = "Template";
	template1.variableType = objectType1;   // Note: for this property a default value is defined.

	var microflowCallParameterMapping1 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping1.__parameter.updateWithRawValue("ExcelImporter.IVK_SaveTemplate.Template");
	microflowCallParameterMapping1.argument = "$Template";

	var microflowCall1 = microflows.MicroflowCall.create(model);
	microflowCall1.microflow = model.findMicroflowByQualifiedName("ExcelImporter.IVK_SaveTemplate");
	microflowCall1.parameterMappings.push(microflowCallParameterMapping1);

	var microflowCallAction1 = microflows.MicroflowCallAction.create(model);
	microflowCallAction1.microflowCall = microflowCall1;   // Note: for this property a default value is defined.
	microflowCallAction1.outputVariableName = "Valid";

	var actionActivity1 = microflows.ActionActivity.create(model);
	actionActivity1.relativeMiddlePoint = {"x":20,"y":200};
	actionActivity1.size = {"width":160,"height":60};
	actionActivity1.action = microflowCallAction1;

	var pageSettings1 = pages.PageSettings.create(model);
	pageSettings1.page = model.findPageByQualifiedName("ExcelImporter.Template_Edit");

	var showPageAction1 = microflows.ShowPageAction.create(model);
	showPageAction1.pageSettings = pageSettings1;   // Note: for this property a default value is defined.
	showPageAction1.passedObjectVariableName = "Template";

	var actionActivity2 = microflows.ActionActivity.create(model);
	actionActivity2.relativeMiddlePoint = {"x":315,"y":200};
	actionActivity2.size = {"width":120,"height":60};
	actionActivity2.action = showPageAction1;

	var expressionSplitCondition1 = microflows.ExpressionSplitCondition.create(model);
	expressionSplitCondition1.expression = "$Valid ";

	var exclusiveSplit1 = microflows.ExclusiveSplit.create(model);
	exclusiveSplit1.relativeMiddlePoint = {"x":165,"y":200};
	exclusiveSplit1.size = {"width":60,"height":40};
	exclusiveSplit1.splitCondition = expressionSplitCondition1;   // Note: for this property a default value is defined.
	exclusiveSplit1.caption = "valid?";

	var endEvent1 = microflows.EndEvent.create(model);
	endEvent1.relativeMiddlePoint = {"x":165,"y":305};
	endEvent1.size = {"width":20,"height":20};

	var constantRange1 = microflows.ConstantRange.create(model);

	var attributeRef1 = domainmodels.AttributeRef.create(model);
	attributeRef1.attribute = model.findAttributeByQualifiedName("MxModelReflection.MxObjectMember.AttributeName");

	var sortItem1 = microflows.SortItem.create(model);
	sortItem1.attributeRef = attributeRef1;   // Note: for this property a default value is defined.

	var sortItemList1 = microflows.SortItemList.create(model);
	sortItemList1.items.push(sortItem1);

	var databaseRetrieveSource1 = microflows.DatabaseRetrieveSource.create(model);
	databaseRetrieveSource1.entity = model.findEntityByQualifiedName("MxModelReflection.MxObjectMember");
	databaseRetrieveSource1.range = constantRange1;   // Note: for this property a default value is defined.
	databaseRetrieveSource1.xPathConstraint = "[MxModelReflection.MxObjectMember_MxObjectType = $MxObjectType]";
	databaseRetrieveSource1.sortItemList = sortItemList1;   // Note: for this property a default value is defined.

	var retrieveAction1 = microflows.RetrieveAction.create(model);
	retrieveAction1.retrieveSource = databaseRetrieveSource1;   // Note: for this property a default value is defined.
	retrieveAction1.outputVariableName = "MemberList";

	var actionActivity3 = microflows.ActionActivity.create(model);
	actionActivity3.relativeMiddlePoint = {"x":795,"y":200};
	actionActivity3.size = {"width":140,"height":60};
	actionActivity3.action = retrieveAction1;

	var associationRetrieveSource1 = microflows.AssociationRetrieveSource.create(model);
	associationRetrieveSource1.startVariableName = "Template";
	associationRetrieveSource1.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_Template");

	var retrieveAction2 = microflows.RetrieveAction.create(model);
	retrieveAction2.retrieveSource = associationRetrieveSource1;   // Note: for this property a default value is defined.
	retrieveAction2.outputVariableName = "ColumnList";

	var actionActivity4 = microflows.ActionActivity.create(model);
	actionActivity4.relativeMiddlePoint = {"x":985,"y":200};
	actionActivity4.size = {"width":200,"height":60};
	actionActivity4.action = retrieveAction2;

	var associationRetrieveSource2 = microflows.AssociationRetrieveSource.create(model);
	associationRetrieveSource2.startVariableName = "Template";
	associationRetrieveSource2.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Template_MxObjectType");

	var retrieveAction3 = microflows.RetrieveAction.create(model);
	retrieveAction3.retrieveSource = associationRetrieveSource2;   // Note: for this property a default value is defined.
	retrieveAction3.outputVariableName = "MxObjectType";

	var actionActivity5 = microflows.ActionActivity.create(model);
	actionActivity5.relativeMiddlePoint = {"x":560,"y":200};
	actionActivity5.size = {"width":240,"height":60};
	actionActivity5.action = retrieveAction3;

	var endEvent2 = microflows.EndEvent.create(model);
	endEvent2.relativeMiddlePoint = {"x":2280,"y":200};
	endEvent2.size = {"width":20,"height":20};

	var aggregateListAction1 = microflows.AggregateListAction.create(model);
	aggregateListAction1.inputListVariableName = "ColumnList";
	aggregateListAction1.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.ColNumber");
	aggregateListAction1.aggregateFunction = microflows.AggregateFunctionEnum.Maximum;
	aggregateListAction1.outputVariableName = "ColNumber";

	var actionActivity6 = microflows.ActionActivity.create(model);
	actionActivity6.relativeMiddlePoint = {"x":1180,"y":200};
	actionActivity6.size = {"width":120,"height":60};
	actionActivity6.action = aggregateListAction1;

	var stringType1 = datatypes.StringType.create(model);

	var createVariableAction1 = microflows.CreateVariableAction.create(model);
	createVariableAction1.variableName = "ColumnTitle";
	createVariableAction1.variableType = stringType1;   // Note: for this property a default value is defined.
	createVariableAction1.initialValue = "$Member/AttributeName";

	var actionActivity7 = microflows.ActionActivity.create(model);
	actionActivity7.relativeMiddlePoint = {"x":125,"y":40};
	actionActivity7.size = {"width":120,"height":60};
	actionActivity7.action = createVariableAction1;

	var expressionSplitCondition2 = microflows.ExpressionSplitCondition.create(model);
	expressionSplitCondition2.expression = "$Column != empty";

	var exclusiveSplit2 = microflows.ExclusiveSplit.create(model);
	exclusiveSplit2.relativeMiddlePoint = {"x":380,"y":130};
	exclusiveSplit2.size = {"width":60,"height":40};
	exclusiveSplit2.splitCondition = expressionSplitCondition2;   // Note: for this property a default value is defined.
	exclusiveSplit2.caption = "found?";

	var find1 = microflows.Find.create(model);
	find1.listVariableName = "ColumnList";
	find1.expression = "$ColumnTitle";
	find1.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.Text");

	var listOperationAction1 = microflows.ListOperationAction.create(model);
	listOperationAction1.operation = find1;   // Note: for this property a default value is defined.
	listOperationAction1.outputVariableName = "Column";

	var actionActivity8 = microflows.ActionActivity.create(model);
	actionActivity8.relativeMiddlePoint = {"x":250,"y":130};
	actionActivity8.size = {"width":80,"height":50};
	actionActivity8.action = listOperationAction1;

	var exclusiveMerge1 = microflows.ExclusiveMerge.create(model);
	exclusiveMerge1.relativeMiddlePoint = {"x":125,"y":130};
	exclusiveMerge1.size = {"width":30,"height":30};

	var changeVariableAction1 = microflows.ChangeVariableAction.create(model);
	changeVariableAction1.changeVariableName = "ColNumber";
	changeVariableAction1.value = "if $ColNumber = empty or $ColNumber = 0\nthen 0\nelse $ColNumber + 1";

	var actionActivity9 = microflows.ActionActivity.create(model);
	actionActivity9.relativeMiddlePoint = {"x":380,"y":230};
	actionActivity9.size = {"width":110,"height":60};
	actionActivity9.action = changeVariableAction1;

	var memberChange1 = microflows.MemberChange.create(model);
	memberChange1.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.ColNumber");
	memberChange1.value = "$ColNumber\n";

	var memberChange2 = microflows.MemberChange.create(model);
	memberChange2.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.Text");
	memberChange2.value = "$ColumnTitle";

	var memberChange3 = microflows.MemberChange.create(model);
	memberChange3.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_Template");
	memberChange3.value = "$Template";

	var createObjectAction1 = microflows.CreateObjectAction.create(model);
	createObjectAction1.items.push(memberChange1);
	createObjectAction1.items.push(memberChange2);
	createObjectAction1.items.push(memberChange3);
	createObjectAction1.entity = model.findEntityByQualifiedName("ExcelImporter.Column");
	createObjectAction1.outputVariableName = "NewColumn";

	var actionActivity10 = microflows.ActionActivity.create(model);
	actionActivity10.relativeMiddlePoint = {"x":230,"y":230};
	actionActivity10.size = {"width":160,"height":60};
	actionActivity10.action = createObjectAction1;

	var memberChange4 = microflows.MemberChange.create(model);
	memberChange4.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.MappingType");
	memberChange4.value = "ExcelImporter.MappingType.Attribute";

	var memberChange5 = microflows.MemberChange.create(model);
	memberChange5.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.FindAttribute");
	memberChange5.value = "$Member/AttributeName";

	var memberChange6 = microflows.MemberChange.create(model);
	memberChange6.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_MxObjectMember");
	memberChange6.value = "$Member";

	var changeObjectAction1 = microflows.ChangeObjectAction.create(model);
	changeObjectAction1.items.push(memberChange4);
	changeObjectAction1.items.push(memberChange5);
	changeObjectAction1.items.push(memberChange6);
	changeObjectAction1.changeVariableName = "Column";

	var actionActivity11 = microflows.ActionActivity.create(model);
	actionActivity11.relativeMiddlePoint = {"x":620,"y":130};
	actionActivity11.size = {"width":270,"height":60};
	actionActivity11.action = changeObjectAction1;

	var microflowObjectCollection1 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection1.objects.push(actionActivity7);
	microflowObjectCollection1.objects.push(exclusiveSplit2);
	microflowObjectCollection1.objects.push(actionActivity8);
	microflowObjectCollection1.objects.push(exclusiveMerge1);
	microflowObjectCollection1.objects.push(actionActivity9);
	microflowObjectCollection1.objects.push(actionActivity10);
	microflowObjectCollection1.objects.push(actionActivity11);

	var iterableList1 = microflows.IterableList.create(model);
	iterableList1.listVariableName = "MemberList";
	iterableList1.variableName = "Member";

	var loopedActivity1 = microflows.LoopedActivity.create(model);
	loopedActivity1.relativeMiddlePoint = {"x":1660,"y":200};
	loopedActivity1.size = {"width":780,"height":300};
	loopedActivity1.objectCollection = microflowObjectCollection1;   // Note: for this property a default value is defined.
	loopedActivity1.loopSource = iterableList1;   // Note: for this property a default value is defined.

	var commitAction1 = microflows.CommitAction.create(model);
	commitAction1.commitVariableName = "ColumnList";
	commitAction1.refreshInClient = true;

	var actionActivity12 = microflows.ActionActivity.create(model);
	actionActivity12.relativeMiddlePoint = {"x":2160,"y":200};
	actionActivity12.size = {"width":120,"height":60};
	actionActivity12.action = commitAction1;

	var microflowObjectCollection2 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection2.objects.push(startEvent1);
	microflowObjectCollection2.objects.push(template1);
	microflowObjectCollection2.objects.push(actionActivity1);
	microflowObjectCollection2.objects.push(actionActivity2);
	microflowObjectCollection2.objects.push(exclusiveSplit1);
	microflowObjectCollection2.objects.push(endEvent1);
	microflowObjectCollection2.objects.push(actionActivity3);
	microflowObjectCollection2.objects.push(actionActivity4);
	microflowObjectCollection2.objects.push(actionActivity5);
	microflowObjectCollection2.objects.push(endEvent2);
	microflowObjectCollection2.objects.push(actionActivity6);
	microflowObjectCollection2.objects.push(loopedActivity1);
	microflowObjectCollection2.objects.push(actionActivity12);

	var noCase1 = microflows.NoCase.create(model);

	var sequenceFlow1 = microflows.SequenceFlow.create(model);
	sequenceFlow1.originConnectionIndex = 1;
	sequenceFlow1.destinationConnectionIndex = 3;
	sequenceFlow1.originBezierVector = {"width":0,"height":0};
	sequenceFlow1.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow1.caseValue = noCase1;   // Note: for this property a default value is defined.

	var noCase2 = microflows.NoCase.create(model);

	var sequenceFlow2 = microflows.SequenceFlow.create(model);
	sequenceFlow2.originConnectionIndex = 1;
	sequenceFlow2.destinationConnectionIndex = 3;
	sequenceFlow2.originBezierVector = {"width":30,"height":0};
	sequenceFlow2.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow2.caseValue = noCase2;   // Note: for this property a default value is defined.

	var enumerationCase1 = microflows.EnumerationCase.create(model);
	enumerationCase1.value = "true";

	var sequenceFlow3 = microflows.SequenceFlow.create(model);
	sequenceFlow3.originConnectionIndex = 1;
	sequenceFlow3.destinationConnectionIndex = 3;
	sequenceFlow3.originBezierVector = {"width":15,"height":0};
	sequenceFlow3.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow3.caseValue = enumerationCase1;   // Note: for this property a default value is defined.

	var enumerationCase2 = microflows.EnumerationCase.create(model);
	enumerationCase2.value = "false";

	var sequenceFlow4 = microflows.SequenceFlow.create(model);
	sequenceFlow4.originConnectionIndex = 2;
	sequenceFlow4.originBezierVector = {"width":0,"height":15};
	sequenceFlow4.destinationBezierVector = {"width":0,"height":-15};
	sequenceFlow4.caseValue = enumerationCase2;   // Note: for this property a default value is defined.

	var noCase3 = microflows.NoCase.create(model);

	var sequenceFlow5 = microflows.SequenceFlow.create(model);
	sequenceFlow5.originConnectionIndex = 1;
	sequenceFlow5.destinationConnectionIndex = 3;
	sequenceFlow5.originBezierVector = {"width":30,"height":0};
	sequenceFlow5.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow5.caseValue = noCase3;   // Note: for this property a default value is defined.

	var noCase4 = microflows.NoCase.create(model);

	var sequenceFlow6 = microflows.SequenceFlow.create(model);
	sequenceFlow6.originConnectionIndex = 1;
	sequenceFlow6.destinationConnectionIndex = 3;
	sequenceFlow6.originBezierVector = {"width":30,"height":0};
	sequenceFlow6.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow6.caseValue = noCase4;   // Note: for this property a default value is defined.

	var noCase5 = microflows.NoCase.create(model);

	var sequenceFlow7 = microflows.SequenceFlow.create(model);
	sequenceFlow7.originConnectionIndex = 1;
	sequenceFlow7.destinationConnectionIndex = 3;
	sequenceFlow7.originBezierVector = {"width":30,"height":0};
	sequenceFlow7.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow7.caseValue = noCase5;   // Note: for this property a default value is defined.

	var noCase6 = microflows.NoCase.create(model);

	var sequenceFlow8 = microflows.SequenceFlow.create(model);
	sequenceFlow8.originConnectionIndex = 1;
	sequenceFlow8.destinationConnectionIndex = 3;
	sequenceFlow8.originBezierVector = {"width":30,"height":0};
	sequenceFlow8.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow8.caseValue = noCase6;   // Note: for this property a default value is defined.

	var noCase7 = microflows.NoCase.create(model);

	var sequenceFlow9 = microflows.SequenceFlow.create(model);
	sequenceFlow9.originConnectionIndex = 1;
	sequenceFlow9.destinationConnectionIndex = 3;
	sequenceFlow9.originBezierVector = {"width":30,"height":0};
	sequenceFlow9.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow9.caseValue = noCase7;   // Note: for this property a default value is defined.

	var noCase8 = microflows.NoCase.create(model);

	var sequenceFlow10 = microflows.SequenceFlow.create(model);
	sequenceFlow10.originConnectionIndex = 1;
	sequenceFlow10.destinationConnectionIndex = 3;
	sequenceFlow10.originBezierVector = {"width":30,"height":0};
	sequenceFlow10.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow10.caseValue = noCase8;   // Note: for this property a default value is defined.

	var enumerationCase3 = microflows.EnumerationCase.create(model);
	enumerationCase3.value = "true";

	var sequenceFlow11 = microflows.SequenceFlow.create(model);
	sequenceFlow11.originConnectionIndex = 1;
	sequenceFlow11.destinationConnectionIndex = 3;
	sequenceFlow11.originBezierVector = {"width":15,"height":0};
	sequenceFlow11.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow11.caseValue = enumerationCase3;   // Note: for this property a default value is defined.

	var noCase9 = microflows.NoCase.create(model);

	var sequenceFlow12 = microflows.SequenceFlow.create(model);
	sequenceFlow12.originConnectionIndex = 2;
	sequenceFlow12.originBezierVector = {"width":0,"height":30};
	sequenceFlow12.destinationBezierVector = {"width":0,"height":-15};
	sequenceFlow12.caseValue = noCase9;   // Note: for this property a default value is defined.

	var noCase10 = microflows.NoCase.create(model);

	var sequenceFlow13 = microflows.SequenceFlow.create(model);
	sequenceFlow13.originConnectionIndex = 1;
	sequenceFlow13.destinationConnectionIndex = 3;
	sequenceFlow13.originBezierVector = {"width":15,"height":0};
	sequenceFlow13.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow13.caseValue = noCase10;   // Note: for this property a default value is defined.

	var enumerationCase4 = microflows.EnumerationCase.create(model);
	enumerationCase4.value = "false";

	var sequenceFlow14 = microflows.SequenceFlow.create(model);
	sequenceFlow14.originConnectionIndex = 2;
	sequenceFlow14.originBezierVector = {"width":0,"height":15};
	sequenceFlow14.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow14.caseValue = enumerationCase4;   // Note: for this property a default value is defined.

	var noCase11 = microflows.NoCase.create(model);

	var sequenceFlow15 = microflows.SequenceFlow.create(model);
	sequenceFlow15.originConnectionIndex = 1;
	sequenceFlow15.destinationConnectionIndex = 3;
	sequenceFlow15.originBezierVector = {"width":30,"height":0};
	sequenceFlow15.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow15.caseValue = noCase11;   // Note: for this property a default value is defined.

	var noCase12 = microflows.NoCase.create(model);

	var sequenceFlow16 = microflows.SequenceFlow.create(model);
	sequenceFlow16.originConnectionIndex = 3;
	sequenceFlow16.destinationConnectionIndex = 1;
	sequenceFlow16.originBezierVector = {"width":-30,"height":0};
	sequenceFlow16.destinationBezierVector = {"width":30,"height":0};
	sequenceFlow16.caseValue = noCase12;   // Note: for this property a default value is defined.

	var noCase13 = microflows.NoCase.create(model);

	var sequenceFlow17 = microflows.SequenceFlow.create(model);
	sequenceFlow17.originConnectionIndex = 3;
	sequenceFlow17.destinationConnectionIndex = 2;
	sequenceFlow17.originBezierVector = {"width":-30,"height":0};
	sequenceFlow17.destinationBezierVector = {"width":0,"height":15};
	sequenceFlow17.caseValue = noCase13;   // Note: for this property a default value is defined.

	var noCase14 = microflows.NoCase.create(model);

	var sequenceFlow18 = microflows.SequenceFlow.create(model);
	sequenceFlow18.originConnectionIndex = 1;
	sequenceFlow18.destinationConnectionIndex = 3;
	sequenceFlow18.originBezierVector = {"width":30,"height":0};
	sequenceFlow18.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow18.caseValue = noCase14;   // Note: for this property a default value is defined.

	var voidType1 = datatypes.VoidType.create(model);

	var translation1 = texts.Translation.create(model);
	translation1.languageCode = "en_US";

	var translation2 = texts.Translation.create(model);
	translation2.languageCode = "en_GB";

	var translation3 = texts.Translation.create(model);
	translation3.languageCode = "en_ZA";

	var text1 = texts.Text.create(model);
	text1.translations.push(translation1);
	text1.translations.push(translation2);
	text1.translations.push(translation3);

	var iVK_SaveNewTemplate_CreateColumns1 = microflows.Microflow.createIn(unit);
	iVK_SaveNewTemplate_CreateColumns1.name = "IVK_SaveNewTemplate_CreateColumns";
	iVK_SaveNewTemplate_CreateColumns1.objectCollection = microflowObjectCollection2;   // Note: for this property a default value is defined.
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow1);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow2);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow3);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow4);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow5);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow6);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow7);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow8);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow9);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow10);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow11);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow12);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow13);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow14);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow15);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow16);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow17);
	iVK_SaveNewTemplate_CreateColumns1.flows.push(sequenceFlow18);
	iVK_SaveNewTemplate_CreateColumns1.microflowReturnType = voidType1;
	iVK_SaveNewTemplate_CreateColumns1.allowedModuleRoles.push(model.findModuleRoleByQualifiedName("ExcelImporter.Configurator"));
	iVK_SaveNewTemplate_CreateColumns1.concurrencyErrorMessage = text1;   // Note: for this property a default value is defined.

	sequenceFlow1.origin = startEvent1;
	sequenceFlow1.destination = actionActivity1;

	sequenceFlow2.origin = actionActivity1;
	sequenceFlow2.destination = exclusiveSplit1;

	sequenceFlow3.origin = exclusiveSplit1;
	sequenceFlow3.destination = actionActivity2;

	sequenceFlow4.origin = exclusiveSplit1;
	sequenceFlow4.destination = endEvent1;

	sequenceFlow5.origin = actionActivity5;
	sequenceFlow5.destination = actionActivity3;

	sequenceFlow6.origin = actionActivity3;
	sequenceFlow6.destination = actionActivity4;

	sequenceFlow7.origin = actionActivity8;
	sequenceFlow7.destination = exclusiveSplit2;

	sequenceFlow8.origin = actionActivity2;
	sequenceFlow8.destination = actionActivity5;

	sequenceFlow9.origin = actionActivity4;
	sequenceFlow9.destination = actionActivity6;

	sequenceFlow10.origin = loopedActivity1;
	sequenceFlow10.destination = actionActivity12;

	sequenceFlow11.origin = exclusiveSplit2;
	sequenceFlow11.destination = actionActivity11;

	sequenceFlow12.origin = actionActivity7;
	sequenceFlow12.destination = exclusiveMerge1;

	sequenceFlow13.origin = exclusiveMerge1;
	sequenceFlow13.destination = actionActivity8;

	sequenceFlow14.origin = exclusiveSplit2;
	sequenceFlow14.destination = actionActivity9;

	sequenceFlow15.origin = actionActivity6;
	sequenceFlow15.destination = loopedActivity1;

	sequenceFlow16.origin = actionActivity9;
	sequenceFlow16.destination = actionActivity10;

	sequenceFlow17.origin = actionActivity10;
	sequenceFlow17.destination = exclusiveMerge1;

	sequenceFlow18.origin = actionActivity12;
	sequenceFlow18.destination = endEvent2;

})