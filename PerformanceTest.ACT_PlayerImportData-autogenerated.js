(function (unit, model) {

	/*
	 * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
	 * from unit with id "74992b3b-1220-4e45-a99e-31e6209e6604" of type Microflows$Microflow
	 * in working copy "SoccerSquad"
	 * on 20-12-2024.
	 */

	var startEvent1 = microflows.StartEvent.create(model);
	startEvent1.relativeMiddlePoint = {"x":-290,"y":200};
	startEvent1.size = {"width":20,"height":20};

	var endEvent1 = microflows.EndEvent.create(model);
	endEvent1.relativeMiddlePoint = {"x":1125,"y":200};
	endEvent1.size = {"width":20,"height":20};

	var constantRange1 = microflows.ConstantRange.create(model);

	var sortItemList1 = microflows.SortItemList.create(model);

	var databaseRetrieveSource1 = microflows.DatabaseRetrieveSource.create(model);
	databaseRetrieveSource1.entity = model.findEntityByQualifiedName("PerformanceTest.PlayerImport");
	databaseRetrieveSource1.range = constantRange1;   // Note: for this property a default value is defined.
	databaseRetrieveSource1.sortItemList = sortItemList1;   // Note: for this property a default value is defined.

	var retrieveAction1 = microflows.RetrieveAction.create(model);
	retrieveAction1.retrieveSource = databaseRetrieveSource1;   // Note: for this property a default value is defined.
	retrieveAction1.outputVariableName = "PlayerImportList";

	var actionActivity1 = microflows.ActionActivity.create(model);
	actionActivity1.relativeMiddlePoint = {"x":-145,"y":200};
	actionActivity1.size = {"width":120,"height":60};
	actionActivity1.action = retrieveAction1;

	var microflowCallParameterMapping1 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping1.__parameter.updateWithRawValue("PerformanceTest.SUB_Player_Create.PlayerImport");
	microflowCallParameterMapping1.argument = "$IteratorPlayerImport";

	var microflowCallParameterMapping2 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping2.__parameter.updateWithRawValue("PerformanceTest.SUB_Player_Create.PlayerList");
	microflowCallParameterMapping2.argument = "$PlayerList";

	var microflowCall1 = microflows.MicroflowCall.create(model);
	microflowCall1.microflow = model.findMicroflowByQualifiedName("PerformanceTest.SUB_Player_Create");
	microflowCall1.parameterMappings.push(microflowCallParameterMapping1);
	microflowCall1.parameterMappings.push(microflowCallParameterMapping2);

	var microflowCallAction1 = microflows.MicroflowCallAction.create(model);
	microflowCallAction1.microflowCall = microflowCall1;   // Note: for this property a default value is defined.

	var actionActivity2 = microflows.ActionActivity.create(model);
	actionActivity2.relativeMiddlePoint = {"x":190,"y":100};
	actionActivity2.size = {"width":140,"height":60};
	actionActivity2.action = microflowCallAction1;

	var microflowObjectCollection1 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection1.objects.push(actionActivity2);

	var iterableList1 = microflows.IterableList.create(model);
	iterableList1.listVariableName = "PlayerImportList";
	iterableList1.variableName = "IteratorPlayerImport";

	var loopedActivity1 = microflows.LoopedActivity.create(model);
	loopedActivity1.relativeMiddlePoint = {"x":705,"y":200};
	loopedActivity1.size = {"width":300,"height":200};
	loopedActivity1.objectCollection = microflowObjectCollection1;   // Note: for this property a default value is defined.
	loopedActivity1.loopSource = iterableList1;   // Note: for this property a default value is defined.

	var createListAction1 = microflows.CreateListAction.create(model);
	createListAction1.entity = model.findEntityByQualifiedName("SoccerSquad.Player");
	createListAction1.outputVariableName = "PlayerList";

	var actionActivity3 = microflows.ActionActivity.create(model);
	actionActivity3.relativeMiddlePoint = {"x":425,"y":200};
	actionActivity3.size = {"width":120,"height":60};
	actionActivity3.action = createListAction1;

	var commitAction1 = microflows.CommitAction.create(model);
	commitAction1.commitVariableName = "PlayerList";

	var actionActivity4 = microflows.ActionActivity.create(model);
	actionActivity4.relativeMiddlePoint = {"x":985,"y":200};
	actionActivity4.size = {"width":120,"height":60};
	actionActivity4.action = commitAction1;

	var aggregateListAction1 = microflows.AggregateListAction.create(model);
	aggregateListAction1.inputListVariableName = "PlayerImportList";
	aggregateListAction1.outputVariableName = "CountPlayers";

	var actionActivity5 = microflows.ActionActivity.create(model);
	actionActivity5.relativeMiddlePoint = {"x":45,"y":200};
	actionActivity5.size = {"width":120,"height":60};
	actionActivity5.action = aggregateListAction1;

	var templateArgument1 = microflows.TemplateArgument.create(model);
	templateArgument1.expression = "toString($CountPlayers)";

	var stringTemplate1 = microflows.StringTemplate.create(model);
	stringTemplate1.arguments.push(templateArgument1);
	stringTemplate1.text = " {1} players found";

	var logMessageAction1 = microflows.LogMessageAction.create(model);
	logMessageAction1.node = "getCaption(PerformanceTest.LogNodes.Generate_data)";
	logMessageAction1.messageTemplate = stringTemplate1;   // Note: for this property a default value is defined.

	var actionActivity6 = microflows.ActionActivity.create(model);
	actionActivity6.relativeMiddlePoint = {"x":235,"y":200};
	actionActivity6.size = {"width":120,"height":60};
	actionActivity6.action = logMessageAction1;

	var microflowObjectCollection2 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection2.objects.push(startEvent1);
	microflowObjectCollection2.objects.push(endEvent1);
	microflowObjectCollection2.objects.push(actionActivity1);
	microflowObjectCollection2.objects.push(loopedActivity1);
	microflowObjectCollection2.objects.push(actionActivity3);
	microflowObjectCollection2.objects.push(actionActivity4);
	microflowObjectCollection2.objects.push(actionActivity5);
	microflowObjectCollection2.objects.push(actionActivity6);

	var noCase1 = microflows.NoCase.create(model);

	var sequenceFlow1 = microflows.SequenceFlow.create(model);
	sequenceFlow1.originConnectionIndex = 1;
	sequenceFlow1.destinationConnectionIndex = 3;
	sequenceFlow1.originBezierVector = {"width":0,"height":0};
	sequenceFlow1.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow1.caseValue = noCase1;   // Note: for this property a default value is defined.

	var noCase2 = microflows.NoCase.create(model);

	var sequenceFlow2 = microflows.SequenceFlow.create(model);
	sequenceFlow2.originConnectionIndex = 1;
	sequenceFlow2.destinationConnectionIndex = 3;
	sequenceFlow2.originBezierVector = {"width":30,"height":0};
	sequenceFlow2.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow2.caseValue = noCase2;   // Note: for this property a default value is defined.

	var noCase3 = microflows.NoCase.create(model);

	var sequenceFlow3 = microflows.SequenceFlow.create(model);
	sequenceFlow3.originConnectionIndex = 1;
	sequenceFlow3.destinationConnectionIndex = 3;
	sequenceFlow3.originBezierVector = {"width":30,"height":0};
	sequenceFlow3.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow3.caseValue = noCase3;   // Note: for this property a default value is defined.

	var noCase4 = microflows.NoCase.create(model);

	var sequenceFlow4 = microflows.SequenceFlow.create(model);
	sequenceFlow4.originConnectionIndex = 1;
	sequenceFlow4.destinationConnectionIndex = 3;
	sequenceFlow4.originBezierVector = {"width":30,"height":0};
	sequenceFlow4.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow4.caseValue = noCase4;   // Note: for this property a default value is defined.

	var noCase5 = microflows.NoCase.create(model);

	var sequenceFlow5 = microflows.SequenceFlow.create(model);
	sequenceFlow5.originConnectionIndex = 1;
	sequenceFlow5.destinationConnectionIndex = 3;
	sequenceFlow5.originBezierVector = {"width":30,"height":0};
	sequenceFlow5.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow5.caseValue = noCase5;   // Note: for this property a default value is defined.

	var noCase6 = microflows.NoCase.create(model);

	var sequenceFlow6 = microflows.SequenceFlow.create(model);
	sequenceFlow6.originConnectionIndex = 1;
	sequenceFlow6.destinationConnectionIndex = 3;
	sequenceFlow6.originBezierVector = {"width":30,"height":0};
	sequenceFlow6.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow6.caseValue = noCase6;   // Note: for this property a default value is defined.

	var noCase7 = microflows.NoCase.create(model);

	var sequenceFlow7 = microflows.SequenceFlow.create(model);
	sequenceFlow7.originConnectionIndex = 1;
	sequenceFlow7.destinationConnectionIndex = 3;
	sequenceFlow7.originBezierVector = {"width":30,"height":0};
	sequenceFlow7.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow7.caseValue = noCase7;   // Note: for this property a default value is defined.

	var voidType1 = datatypes.VoidType.create(model);

	var translation1 = texts.Translation.create(model);
	translation1.languageCode = "en_US";

	var text1 = texts.Text.create(model);
	text1.translations.push(translation1);

	var aCT_PlayerImportData1 = microflows.Microflow.createIn(unit);
	aCT_PlayerImportData1.name = "ACT_PlayerImportData";
	aCT_PlayerImportData1.objectCollection = microflowObjectCollection2;   // Note: for this property a default value is defined.
	aCT_PlayerImportData1.flows.push(sequenceFlow1);
	aCT_PlayerImportData1.flows.push(sequenceFlow2);
	aCT_PlayerImportData1.flows.push(sequenceFlow3);
	aCT_PlayerImportData1.flows.push(sequenceFlow4);
	aCT_PlayerImportData1.flows.push(sequenceFlow5);
	aCT_PlayerImportData1.flows.push(sequenceFlow6);
	aCT_PlayerImportData1.flows.push(sequenceFlow7);
	aCT_PlayerImportData1.microflowReturnType = voidType1;
	aCT_PlayerImportData1.allowedModuleRoles.push(model.findModuleRoleByQualifiedName("PerformanceTest.PerformanceTester"));
	aCT_PlayerImportData1.concurrencyErrorMessage = text1;   // Note: for this property a default value is defined.

	sequenceFlow1.origin = startEvent1;
	sequenceFlow1.destination = actionActivity1;

	sequenceFlow2.origin = actionActivity1;
	sequenceFlow2.destination = actionActivity5;

	sequenceFlow3.origin = loopedActivity1;
	sequenceFlow3.destination = actionActivity4;

	sequenceFlow4.origin = actionActivity3;
	sequenceFlow4.destination = loopedActivity1;

	sequenceFlow5.origin = actionActivity4;
	sequenceFlow5.destination = endEvent1;

	sequenceFlow6.origin = actionActivity5;
	sequenceFlow6.destination = actionActivity6;

	sequenceFlow7.origin = actionActivity6;
	sequenceFlow7.destination = actionActivity3;

})