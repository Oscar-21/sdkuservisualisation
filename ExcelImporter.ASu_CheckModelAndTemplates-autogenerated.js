(function (unit, model) {

	/*
	 * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
	 * from unit with id "d7d94951-fa8d-4fcb-969f-b3c623c1b7ff" of type Microflows$Microflow
	 * in working copy "SoccerSquad"
	 * on 20-12-2024.
	 */

	var startEvent1 = microflows.StartEvent.create(model);
	startEvent1.relativeMiddlePoint = {"x":295,"y":135};
	startEvent1.size = {"width":20,"height":20};

	var constantRange1 = microflows.ConstantRange.create(model);

	var sortItemList1 = microflows.SortItemList.create(model);

	var databaseRetrieveSource1 = microflows.DatabaseRetrieveSource.create(model);
	databaseRetrieveSource1.entity = model.findEntityByQualifiedName("ExcelImporter.Template");
	databaseRetrieveSource1.range = constantRange1;   // Note: for this property a default value is defined.
	databaseRetrieveSource1.sortItemList = sortItemList1;   // Note: for this property a default value is defined.

	var retrieveAction1 = microflows.RetrieveAction.create(model);
	retrieveAction1.errorHandlingType = microflows.ErrorHandlingType.CustomWithoutRollBack;
	retrieveAction1.retrieveSource = databaseRetrieveSource1;   // Note: for this property a default value is defined.
	retrieveAction1.outputVariableName = "allTemplates";

	var actionActivity1 = microflows.ActionActivity.create(model);
	actionActivity1.relativeMiddlePoint = {"x":645,"y":135};
	actionActivity1.size = {"width":110,"height":60};
	actionActivity1.action = retrieveAction1;
	actionActivity1.caption = "Get all templates";
	actionActivity1.autoGenerateCaption = false;

	var endEvent1 = microflows.EndEvent.create(model);
	endEvent1.relativeMiddlePoint = {"x":645,"y":-5};
	endEvent1.size = {"width":20,"height":20};
	endEvent1.returnValue = "true";

	var microflowCall1 = microflows.MicroflowCall.create(model);
	microflowCall1.microflow = model.findMicroflowByQualifiedName("MxModelReflection.ASu_CheckMetamodel");

	var microflowCallAction1 = microflows.MicroflowCallAction.create(model);
	microflowCallAction1.microflowCall = microflowCall1;   // Note: for this property a default value is defined.
	microflowCallAction1.outputVariableName = "unused";

	var actionActivity2 = microflows.ActionActivity.create(model);
	actionActivity2.relativeMiddlePoint = {"x":425,"y":135};
	actionActivity2.size = {"width":150,"height":60};
	actionActivity2.action = microflowCallAction1;
	actionActivity2.caption = "Check the MxModelReflection objects";
	actionActivity2.autoGenerateCaption = false;

	var endEvent2 = microflows.EndEvent.create(model);
	endEvent2.relativeMiddlePoint = {"x":1170,"y":135};
	endEvent2.size = {"width":20,"height":20};
	endEvent2.returnValue = "$unused";

	var microflowCallParameterMapping1 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping1.__parameter.updateWithRawValue("ExcelImporter.ValidateTemplate.Template");
	microflowCallParameterMapping1.argument = "$iTemplate";

	var microflowCallParameterMapping2 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping2.__parameter.updateWithRawValue("ExcelImporter.ValidateTemplate.ShowWarningPopup");
	microflowCallParameterMapping2.argument = "false";

	var microflowCall2 = microflows.MicroflowCall.create(model);
	microflowCall2.microflow = model.findMicroflowByQualifiedName("ExcelImporter.ValidateTemplate");
	microflowCall2.parameterMappings.push(microflowCallParameterMapping1);
	microflowCall2.parameterMappings.push(microflowCallParameterMapping2);

	var microflowCallAction2 = microflows.MicroflowCallAction.create(model);
	microflowCallAction2.microflowCall = microflowCall2;   // Note: for this property a default value is defined.
	microflowCallAction2.outputVariableName = "valid";

	var actionActivity3 = microflows.ActionActivity.create(model);
	actionActivity3.relativeMiddlePoint = {"x":125,"y":45};
	actionActivity3.size = {"width":110,"height":60};
	actionActivity3.action = microflowCallAction2;
	actionActivity3.caption = "Validate the template";
	actionActivity3.autoGenerateCaption = false;

	var memberChange1 = microflows.MemberChange.create(model);
	memberChange1.attribute = model.findAttributeByQualifiedName("ExcelImporter.Template.Status");
	memberChange1.value = "if( $iTemplate/Status = ExcelImporter.Status.INFO ) then\n\tExcelImporter.Status.INFO\nelse if( $valid ) then\n\tExcelImporter.Status.VALID\nelse\n\tExcelImporter.Status.INVALID";

	var changeObjectAction1 = microflows.ChangeObjectAction.create(model);
	changeObjectAction1.items.push(memberChange1);
	changeObjectAction1.commit = microflows.CommitEnum.YesWithoutEvents;
	changeObjectAction1.changeVariableName = "iTemplate";

	var actionActivity4 = microflows.ActionActivity.create(model);
	actionActivity4.relativeMiddlePoint = {"x":280,"y":45};
	actionActivity4.size = {"width":130,"height":60};
	actionActivity4.action = changeObjectAction1;
	actionActivity4.caption = "Set the template status\r\nCWE ";
	actionActivity4.autoGenerateCaption = false;

	var microflowObjectCollection1 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection1.objects.push(actionActivity3);
	microflowObjectCollection1.objects.push(actionActivity4);

	var iterableList1 = microflows.IterableList.create(model);
	iterableList1.listVariableName = "allTemplates";
	iterableList1.variableName = "iTemplate";

	var loopedActivity1 = microflows.LoopedActivity.create(model);
	loopedActivity1.relativeMiddlePoint = {"x":915,"y":135};
	loopedActivity1.size = {"width":370,"height":90};
	loopedActivity1.objectCollection = microflowObjectCollection1;   // Note: for this property a default value is defined.
	loopedActivity1.errorHandlingType = microflows.ErrorHandlingType.Continue;
	loopedActivity1.loopSource = iterableList1;   // Note: for this property a default value is defined.

	var microflowObjectCollection2 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection2.objects.push(startEvent1);
	microflowObjectCollection2.objects.push(actionActivity1);
	microflowObjectCollection2.objects.push(endEvent1);
	microflowObjectCollection2.objects.push(actionActivity2);
	microflowObjectCollection2.objects.push(endEvent2);
	microflowObjectCollection2.objects.push(loopedActivity1);

	var noCase1 = microflows.NoCase.create(model);

	var sequenceFlow1 = microflows.SequenceFlow.create(model);
	sequenceFlow1.originConnectionIndex = 1;
	sequenceFlow1.destinationConnectionIndex = 3;
	sequenceFlow1.originBezierVector = {"width":0,"height":0};
	sequenceFlow1.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow1.caseValue = noCase1;   // Note: for this property a default value is defined.

	var noCase2 = microflows.NoCase.create(model);

	var sequenceFlow2 = microflows.SequenceFlow.create(model);
	sequenceFlow2.originConnectionIndex = 1;
	sequenceFlow2.destinationConnectionIndex = 3;
	sequenceFlow2.originBezierVector = {"width":30,"height":0};
	sequenceFlow2.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow2.caseValue = noCase2;   // Note: for this property a default value is defined.

	var noCase3 = microflows.NoCase.create(model);

	var sequenceFlow3 = microflows.SequenceFlow.create(model);
	sequenceFlow3.originConnectionIndex = 1;
	sequenceFlow3.destinationConnectionIndex = 3;
	sequenceFlow3.originBezierVector = {"width":30,"height":0};
	sequenceFlow3.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow3.caseValue = noCase3;   // Note: for this property a default value is defined.

	var noCase4 = microflows.NoCase.create(model);

	var sequenceFlow4 = microflows.SequenceFlow.create(model);
	sequenceFlow4.destinationConnectionIndex = 2;
	sequenceFlow4.originBezierVector = {"width":0,"height":-30};
	sequenceFlow4.destinationBezierVector = {"width":0,"height":15};
	sequenceFlow4.caseValue = noCase4;   // Note: for this property a default value is defined.
	sequenceFlow4.isErrorHandler = true;

	var noCase5 = microflows.NoCase.create(model);

	var sequenceFlow5 = microflows.SequenceFlow.create(model);
	sequenceFlow5.originConnectionIndex = 1;
	sequenceFlow5.destinationConnectionIndex = 3;
	sequenceFlow5.originBezierVector = {"width":30,"height":0};
	sequenceFlow5.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow5.caseValue = noCase5;   // Note: for this property a default value is defined.

	var noCase6 = microflows.NoCase.create(model);

	var sequenceFlow6 = microflows.SequenceFlow.create(model);
	sequenceFlow6.originConnectionIndex = 1;
	sequenceFlow6.destinationConnectionIndex = 3;
	sequenceFlow6.originBezierVector = {"width":30,"height":0};
	sequenceFlow6.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow6.caseValue = noCase6;   // Note: for this property a default value is defined.

	var booleanType1 = datatypes.BooleanType.create(model);

	var translation1 = texts.Translation.create(model);
	translation1.languageCode = "en_US";

	var translation2 = texts.Translation.create(model);
	translation2.languageCode = "en_GB";

	var translation3 = texts.Translation.create(model);
	translation3.languageCode = "en_ZA";

	var text1 = texts.Text.create(model);
	text1.translations.push(translation1);
	text1.translations.push(translation2);
	text1.translations.push(translation3);

	var aSu_CheckModelAndTemplates1 = microflows.Microflow.createIn(unit);
	aSu_CheckModelAndTemplates1.name = "ASu_CheckModelAndTemplates";
	aSu_CheckModelAndTemplates1.documentation = "This microflow shows the actions which should be executed when the application is being started.\r\n\r\nFirst synchronize all objects using the ModelReflection module. Then validate the excel templats";
	aSu_CheckModelAndTemplates1.objectCollection = microflowObjectCollection2;   // Note: for this property a default value is defined.
	aSu_CheckModelAndTemplates1.flows.push(sequenceFlow1);
	aSu_CheckModelAndTemplates1.flows.push(sequenceFlow2);
	aSu_CheckModelAndTemplates1.flows.push(sequenceFlow3);
	aSu_CheckModelAndTemplates1.flows.push(sequenceFlow4);
	aSu_CheckModelAndTemplates1.flows.push(sequenceFlow5);
	aSu_CheckModelAndTemplates1.flows.push(sequenceFlow6);
	aSu_CheckModelAndTemplates1.microflowReturnType = booleanType1;
	aSu_CheckModelAndTemplates1.applyEntityAccess = true;
	aSu_CheckModelAndTemplates1.concurrencyErrorMessage = text1;   // Note: for this property a default value is defined.

	sequenceFlow1.origin = startEvent1;
	sequenceFlow1.destination = actionActivity2;

	sequenceFlow2.origin = actionActivity1;
	sequenceFlow2.destination = loopedActivity1;

	sequenceFlow3.origin = loopedActivity1;
	sequenceFlow3.destination = endEvent2;

	sequenceFlow4.origin = actionActivity1;
	sequenceFlow4.destination = endEvent1;

	sequenceFlow5.origin = actionActivity2;
	sequenceFlow5.destination = actionActivity1;

	sequenceFlow6.origin = actionActivity3;
	sequenceFlow6.destination = actionActivity4;

})