(function (unit, model) {

	/*
	 * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
	 * from unit with id "aa4af7b6-c2f1-4350-826e-9dcd4625b20f" of type Microflows$Microflow
	 * in working copy "SoccerSquad"
	 * on 20-12-2024.
	 */

	var startEvent1 = microflows.StartEvent.create(model);
	startEvent1.relativeMiddlePoint = {"x":-100,"y":200};
	startEvent1.size = {"width":20,"height":20};

	var endEvent1 = microflows.EndEvent.create(model);
	endEvent1.relativeMiddlePoint = {"x":1125,"y":200};
	endEvent1.size = {"width":20,"height":20};

	var objectType1 = datatypes.ObjectType.create(model);
	objectType1.entity = model.findEntityByQualifiedName("ExcelImporter.Template");

	var template1 = microflows.MicroflowParameterObject.create(model);
	template1.relativeMiddlePoint = {"x":-100,"y":120};
	template1.size = {"width":30,"height":30};
	template1.name = "Template";
	template1.variableType = objectType1;   // Note: for this property a default value is defined.

	var stringType1 = datatypes.StringType.create(model);

	var attribute1 = microflows.MicroflowParameterObject.create(model);
	attribute1.relativeMiddlePoint = {"x":-100,"y":45};
	attribute1.size = {"width":30,"height":30};
	attribute1.name = "Attribute";
	attribute1.variableType = stringType1;   // Note: for this property a default value is defined.

	var find1 = microflows.Find.create(model);
	find1.listVariableName = "ColumnList";
	find1.expression = "$ColNr";
	find1.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.ColNumber");

	var listOperationAction1 = microflows.ListOperationAction.create(model);
	listOperationAction1.operation = find1;   // Note: for this property a default value is defined.
	listOperationAction1.outputVariableName = "Column";

	var actionActivity1 = microflows.ActionActivity.create(model);
	actionActivity1.relativeMiddlePoint = {"x":315,"y":200};
	actionActivity1.size = {"width":120,"height":60};
	actionActivity1.action = listOperationAction1;

	var integerType1 = datatypes.IntegerType.create(model);

	var colNr1 = microflows.MicroflowParameterObject.create(model);
	colNr1.relativeMiddlePoint = {"x":-100,"y":-25};
	colNr1.size = {"width":30,"height":30};
	colNr1.name = "ColNr";
	colNr1.variableType = integerType1;   // Note: for this property a default value is defined.

	var listType1 = datatypes.ListType.create(model);
	listType1.entity = model.findEntityByQualifiedName("ExcelImporter.Column");

	var columnList1 = microflows.MicroflowParameterObject.create(model);
	columnList1.relativeMiddlePoint = {"x":0,"y":120};
	columnList1.size = {"width":30,"height":30};
	columnList1.name = "ColumnList";
	columnList1.variableType = listType1;   // Note: for this property a default value is defined.

	var exclusiveMerge1 = microflows.ExclusiveMerge.create(model);
	exclusiveMerge1.relativeMiddlePoint = {"x":185,"y":200};
	exclusiveMerge1.size = {"width":40,"height":30};

	var expressionSplitCondition1 = microflows.ExpressionSplitCondition.create(model);
	expressionSplitCondition1.expression = "$Column != empty";

	var exclusiveSplit1 = microflows.ExclusiveSplit.create(model);
	exclusiveSplit1.relativeMiddlePoint = {"x":450,"y":200};
	exclusiveSplit1.size = {"width":60,"height":40};
	exclusiveSplit1.splitCondition = expressionSplitCondition1;   // Note: for this property a default value is defined.
	exclusiveSplit1.caption = "Found?";

	var memberChange1 = microflows.MemberChange.create(model);
	memberChange1.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.ColNumber");
	memberChange1.value = "$ColNr";

	var createObjectAction1 = microflows.CreateObjectAction.create(model);
	createObjectAction1.items.push(memberChange1);
	createObjectAction1.entity = model.findEntityByQualifiedName("ExcelImporter.Column");
	createObjectAction1.outputVariableName = "NewColumn";

	var actionActivity2 = microflows.ActionActivity.create(model);
	actionActivity2.relativeMiddlePoint = {"x":315,"y":300};
	actionActivity2.size = {"width":120,"height":60};
	actionActivity2.action = createObjectAction1;

	var changeListAction1 = microflows.ChangeListAction.create(model);
	changeListAction1.changeVariableName = "ColumnList";
	changeListAction1.value = "$NewColumn";

	var actionActivity3 = microflows.ActionActivity.create(model);
	actionActivity3.relativeMiddlePoint = {"x":185,"y":300};
	actionActivity3.size = {"width":100,"height":60};
	actionActivity3.action = changeListAction1;

	var enumerationType1 = datatypes.EnumerationType.create(model);
	enumerationType1.enumeration = model.findEnumerationByQualifiedName("ExcelImporter.YesNo");

	var isKey1 = microflows.MicroflowParameterObject.create(model);
	isKey1.relativeMiddlePoint = {"x":0,"y":45};
	isKey1.size = {"width":30,"height":30};
	isKey1.name = "IsKey";
	isKey1.variableType = enumerationType1;   // Note: for this property a default value is defined.

	var microflowCallParameterMapping1 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping1.__parameter.updateWithRawValue("MxModelReflection.FindMember.MemberSearchString");
	microflowCallParameterMapping1.argument = "$Attribute";

	var microflowCallParameterMapping2 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping2.__parameter.updateWithRawValue("MxModelReflection.FindMember.MxObjectType");
	microflowCallParameterMapping2.argument = "$MxObjectType";

	var microflowCall1 = microflows.MicroflowCall.create(model);
	microflowCall1.microflow = model.findMicroflowByQualifiedName("MxModelReflection.FindMember");
	microflowCall1.parameterMappings.push(microflowCallParameterMapping1);
	microflowCall1.parameterMappings.push(microflowCallParameterMapping2);

	var microflowCallAction1 = microflows.MicroflowCallAction.create(model);
	microflowCallAction1.microflowCall = microflowCall1;   // Note: for this property a default value is defined.
	microflowCallAction1.outputVariableName = "MxObjectMember";

	var actionActivity4 = microflows.ActionActivity.create(model);
	actionActivity4.relativeMiddlePoint = {"x":595,"y":200};
	actionActivity4.size = {"width":120,"height":60};
	actionActivity4.action = microflowCallAction1;

	var memberChange2 = microflows.MemberChange.create(model);
	memberChange2.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.Text");
	memberChange2.value = "$Attribute";

	var memberChange3 = microflows.MemberChange.create(model);
	memberChange3.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.MappingType");
	memberChange3.value = "ExcelImporter.MappingType.Attribute";

	var memberChange4 = microflows.MemberChange.create(model);
	memberChange4.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.IsKey");
	memberChange4.value = "$IsKey";

	var memberChange5 = microflows.MemberChange.create(model);
	memberChange5.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.CaseSensitive");
	memberChange5.value = "ExcelImporter.YesNo.Yes";

	var memberChange6 = microflows.MemberChange.create(model);
	memberChange6.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.DataSource");
	memberChange6.value = "ExcelImporter.DataSource.CellValue";

	var memberChange7 = microflows.MemberChange.create(model);
	memberChange7.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_Template");
	memberChange7.value = "$Template";

	var memberChange8 = microflows.MemberChange.create(model);
	memberChange8.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_MxObjectType");
	memberChange8.value = "$Template/ExcelImporter.Template_MxObjectType";

	var memberChange9 = microflows.MemberChange.create(model);
	memberChange9.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_MxObjectMember");
	memberChange9.value = "$MxObjectMember";

	var changeObjectAction1 = microflows.ChangeObjectAction.create(model);
	changeObjectAction1.items.push(memberChange2);
	changeObjectAction1.items.push(memberChange3);
	changeObjectAction1.items.push(memberChange4);
	changeObjectAction1.items.push(memberChange5);
	changeObjectAction1.items.push(memberChange6);
	changeObjectAction1.items.push(memberChange7);
	changeObjectAction1.items.push(memberChange8);
	changeObjectAction1.items.push(memberChange9);
	changeObjectAction1.changeVariableName = "Column";

	var actionActivity5 = microflows.ActionActivity.create(model);
	actionActivity5.relativeMiddlePoint = {"x":790,"y":200};
	actionActivity5.size = {"width":200,"height":90};
	actionActivity5.action = changeObjectAction1;

	var stringType2 = datatypes.StringType.create(model);

	var mFName1 = microflows.MicroflowParameterObject.create(model);
	mFName1.relativeMiddlePoint = {"x":100,"y":45};
	mFName1.size = {"width":30,"height":30};
	mFName1.name = "MFName";
	mFName1.variableType = stringType2;   // Note: for this property a default value is defined.

	var expressionSplitCondition2 = microflows.ExpressionSplitCondition.create(model);
	expressionSplitCondition2.expression = "$MFName != empty";

	var exclusiveSplit2 = microflows.ExclusiveSplit.create(model);
	exclusiveSplit2.relativeMiddlePoint = {"x":970,"y":200};
	exclusiveSplit2.size = {"width":60,"height":40};
	exclusiveSplit2.splitCondition = expressionSplitCondition2;   // Note: for this property a default value is defined.
	exclusiveSplit2.caption = "has mf name?";

	var microflowCallParameterMapping3 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping3.__parameter.updateWithRawValue("MxModelReflection.FindMicroflow.MicroflowSearchString");
	microflowCallParameterMapping3.argument = "$MFName";

	var microflowCall2 = microflows.MicroflowCall.create(model);
	microflowCall2.microflow = model.findMicroflowByQualifiedName("MxModelReflection.FindMicroflow");
	microflowCall2.parameterMappings.push(microflowCallParameterMapping3);

	var microflowCallAction2 = microflows.MicroflowCallAction.create(model);
	microflowCallAction2.microflowCall = microflowCall2;   // Note: for this property a default value is defined.
	microflowCallAction2.outputVariableName = "Microflows";

	var actionActivity6 = microflows.ActionActivity.create(model);
	actionActivity6.relativeMiddlePoint = {"x":970,"y":300};
	actionActivity6.size = {"width":120,"height":60};
	actionActivity6.action = microflowCallAction2;

	var memberChange10 = microflows.MemberChange.create(model);
	memberChange10.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_Microflows");
	memberChange10.value = "$Microflows";

	var changeObjectAction2 = microflows.ChangeObjectAction.create(model);
	changeObjectAction2.items.push(memberChange10);
	changeObjectAction2.changeVariableName = "Column";

	var actionActivity7 = microflows.ActionActivity.create(model);
	actionActivity7.relativeMiddlePoint = {"x":1125,"y":300};
	actionActivity7.size = {"width":140,"height":60};
	actionActivity7.action = changeObjectAction2;

	var endEvent2 = microflows.EndEvent.create(model);
	endEvent2.relativeMiddlePoint = {"x":1230,"y":300};
	endEvent2.size = {"width":20,"height":20};

	var associationRetrieveSource1 = microflows.AssociationRetrieveSource.create(model);
	associationRetrieveSource1.startVariableName = "Template";
	associationRetrieveSource1.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Template_MxObjectType");

	var retrieveAction1 = microflows.RetrieveAction.create(model);
	retrieveAction1.retrieveSource = associationRetrieveSource1;   // Note: for this property a default value is defined.
	retrieveAction1.outputVariableName = "MxObjectType";

	var actionActivity8 = microflows.ActionActivity.create(model);
	actionActivity8.relativeMiddlePoint = {"x":35,"y":200};
	actionActivity8.size = {"width":180,"height":60};
	actionActivity8.action = retrieveAction1;

	var microflowObjectCollection1 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection1.objects.push(startEvent1);
	microflowObjectCollection1.objects.push(endEvent1);
	microflowObjectCollection1.objects.push(template1);
	microflowObjectCollection1.objects.push(attribute1);
	microflowObjectCollection1.objects.push(actionActivity1);
	microflowObjectCollection1.objects.push(colNr1);
	microflowObjectCollection1.objects.push(columnList1);
	microflowObjectCollection1.objects.push(exclusiveMerge1);
	microflowObjectCollection1.objects.push(exclusiveSplit1);
	microflowObjectCollection1.objects.push(actionActivity2);
	microflowObjectCollection1.objects.push(actionActivity3);
	microflowObjectCollection1.objects.push(isKey1);
	microflowObjectCollection1.objects.push(actionActivity4);
	microflowObjectCollection1.objects.push(actionActivity5);
	microflowObjectCollection1.objects.push(mFName1);
	microflowObjectCollection1.objects.push(exclusiveSplit2);
	microflowObjectCollection1.objects.push(actionActivity6);
	microflowObjectCollection1.objects.push(actionActivity7);
	microflowObjectCollection1.objects.push(endEvent2);
	microflowObjectCollection1.objects.push(actionActivity8);

	var noCase1 = microflows.NoCase.create(model);

	var sequenceFlow1 = microflows.SequenceFlow.create(model);
	sequenceFlow1.originConnectionIndex = 1;
	sequenceFlow1.destinationConnectionIndex = 3;
	sequenceFlow1.originBezierVector = {"width":0,"height":0};
	sequenceFlow1.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow1.caseValue = noCase1;   // Note: for this property a default value is defined.

	var noCase2 = microflows.NoCase.create(model);

	var sequenceFlow2 = microflows.SequenceFlow.create(model);
	sequenceFlow2.originConnectionIndex = 1;
	sequenceFlow2.destinationConnectionIndex = 3;
	sequenceFlow2.originBezierVector = {"width":30,"height":0};
	sequenceFlow2.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow2.caseValue = noCase2;   // Note: for this property a default value is defined.

	var noCase3 = microflows.NoCase.create(model);

	var sequenceFlow3 = microflows.SequenceFlow.create(model);
	sequenceFlow3.originConnectionIndex = 1;
	sequenceFlow3.destinationConnectionIndex = 3;
	sequenceFlow3.originBezierVector = {"width":15,"height":0};
	sequenceFlow3.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow3.caseValue = noCase3;   // Note: for this property a default value is defined.

	var enumerationCase1 = microflows.EnumerationCase.create(model);
	enumerationCase1.value = "true";

	var sequenceFlow4 = microflows.SequenceFlow.create(model);
	sequenceFlow4.originConnectionIndex = 1;
	sequenceFlow4.destinationConnectionIndex = 3;
	sequenceFlow4.originBezierVector = {"width":15,"height":0};
	sequenceFlow4.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow4.caseValue = enumerationCase1;   // Note: for this property a default value is defined.

	var enumerationCase2 = microflows.EnumerationCase.create(model);
	enumerationCase2.value = "false";

	var sequenceFlow5 = microflows.SequenceFlow.create(model);
	sequenceFlow5.originConnectionIndex = 2;
	sequenceFlow5.destinationConnectionIndex = 1;
	sequenceFlow5.originBezierVector = {"width":0,"height":15};
	sequenceFlow5.destinationBezierVector = {"width":30,"height":0};
	sequenceFlow5.caseValue = enumerationCase2;   // Note: for this property a default value is defined.

	var noCase4 = microflows.NoCase.create(model);

	var sequenceFlow6 = microflows.SequenceFlow.create(model);
	sequenceFlow6.originConnectionIndex = 3;
	sequenceFlow6.destinationConnectionIndex = 1;
	sequenceFlow6.originBezierVector = {"width":-30,"height":0};
	sequenceFlow6.destinationBezierVector = {"width":30,"height":0};
	sequenceFlow6.caseValue = noCase4;   // Note: for this property a default value is defined.

	var noCase5 = microflows.NoCase.create(model);

	var sequenceFlow7 = microflows.SequenceFlow.create(model);
	sequenceFlow7.destinationConnectionIndex = 2;
	sequenceFlow7.originBezierVector = {"width":0,"height":-30};
	sequenceFlow7.destinationBezierVector = {"width":0,"height":15};
	sequenceFlow7.caseValue = noCase5;   // Note: for this property a default value is defined.

	var noCase6 = microflows.NoCase.create(model);

	var sequenceFlow8 = microflows.SequenceFlow.create(model);
	sequenceFlow8.originConnectionIndex = 1;
	sequenceFlow8.destinationConnectionIndex = 3;
	sequenceFlow8.originBezierVector = {"width":30,"height":0};
	sequenceFlow8.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow8.caseValue = noCase6;   // Note: for this property a default value is defined.

	var noCase7 = microflows.NoCase.create(model);

	var sequenceFlow9 = microflows.SequenceFlow.create(model);
	sequenceFlow9.originConnectionIndex = 1;
	sequenceFlow9.destinationConnectionIndex = 3;
	sequenceFlow9.originBezierVector = {"width":30,"height":0};
	sequenceFlow9.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow9.caseValue = noCase7;   // Note: for this property a default value is defined.

	var enumerationCase3 = microflows.EnumerationCase.create(model);
	enumerationCase3.value = "false";

	var sequenceFlow10 = microflows.SequenceFlow.create(model);
	sequenceFlow10.originConnectionIndex = 1;
	sequenceFlow10.destinationConnectionIndex = 3;
	sequenceFlow10.originBezierVector = {"width":15,"height":0};
	sequenceFlow10.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow10.caseValue = enumerationCase3;   // Note: for this property a default value is defined.

	var enumerationCase4 = microflows.EnumerationCase.create(model);
	enumerationCase4.value = "true";

	var sequenceFlow11 = microflows.SequenceFlow.create(model);
	sequenceFlow11.originConnectionIndex = 2;
	sequenceFlow11.originBezierVector = {"width":0,"height":15};
	sequenceFlow11.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow11.caseValue = enumerationCase4;   // Note: for this property a default value is defined.

	var noCase8 = microflows.NoCase.create(model);

	var sequenceFlow12 = microflows.SequenceFlow.create(model);
	sequenceFlow12.originConnectionIndex = 1;
	sequenceFlow12.destinationConnectionIndex = 3;
	sequenceFlow12.originBezierVector = {"width":30,"height":0};
	sequenceFlow12.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow12.caseValue = noCase8;   // Note: for this property a default value is defined.

	var noCase9 = microflows.NoCase.create(model);

	var sequenceFlow13 = microflows.SequenceFlow.create(model);
	sequenceFlow13.originConnectionIndex = 1;
	sequenceFlow13.destinationConnectionIndex = 3;
	sequenceFlow13.originBezierVector = {"width":30,"height":0};
	sequenceFlow13.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow13.caseValue = noCase9;   // Note: for this property a default value is defined.

	var noCase10 = microflows.NoCase.create(model);

	var sequenceFlow14 = microflows.SequenceFlow.create(model);
	sequenceFlow14.originConnectionIndex = 1;
	sequenceFlow14.destinationConnectionIndex = 3;
	sequenceFlow14.originBezierVector = {"width":30,"height":0};
	sequenceFlow14.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow14.caseValue = noCase10;   // Note: for this property a default value is defined.

	var voidType1 = datatypes.VoidType.create(model);

	var translation1 = texts.Translation.create(model);
	translation1.languageCode = "en_US";

	var translation2 = texts.Translation.create(model);
	translation2.languageCode = "en_GB";

	var translation3 = texts.Translation.create(model);
	translation3.languageCode = "en_ZA";

	var text1 = texts.Text.create(model);
	text1.translations.push(translation1);
	text1.translations.push(translation2);
	text1.translations.push(translation3);

	var setupColumn1 = microflows.Microflow.createIn(unit);
	setupColumn1.name = "SetupColumn";
	setupColumn1.objectCollection = microflowObjectCollection1;   // Note: for this property a default value is defined.
	setupColumn1.flows.push(sequenceFlow1);
	setupColumn1.flows.push(sequenceFlow2);
	setupColumn1.flows.push(sequenceFlow3);
	setupColumn1.flows.push(sequenceFlow4);
	setupColumn1.flows.push(sequenceFlow5);
	setupColumn1.flows.push(sequenceFlow6);
	setupColumn1.flows.push(sequenceFlow7);
	setupColumn1.flows.push(sequenceFlow8);
	setupColumn1.flows.push(sequenceFlow9);
	setupColumn1.flows.push(sequenceFlow10);
	setupColumn1.flows.push(sequenceFlow11);
	setupColumn1.flows.push(sequenceFlow12);
	setupColumn1.flows.push(sequenceFlow13);
	setupColumn1.flows.push(sequenceFlow14);
	setupColumn1.microflowReturnType = voidType1;
	setupColumn1.concurrencyErrorMessage = text1;   // Note: for this property a default value is defined.

	sequenceFlow1.origin = startEvent1;
	sequenceFlow1.destination = actionActivity8;

	sequenceFlow2.origin = actionActivity1;
	sequenceFlow2.destination = exclusiveSplit1;

	sequenceFlow3.origin = exclusiveMerge1;
	sequenceFlow3.destination = actionActivity1;

	sequenceFlow4.origin = exclusiveSplit1;
	sequenceFlow4.destination = actionActivity4;

	sequenceFlow5.origin = exclusiveSplit1;
	sequenceFlow5.destination = actionActivity2;

	sequenceFlow6.origin = actionActivity2;
	sequenceFlow6.destination = actionActivity3;

	sequenceFlow7.origin = actionActivity3;
	sequenceFlow7.destination = exclusiveMerge1;

	sequenceFlow8.origin = actionActivity5;
	sequenceFlow8.destination = exclusiveSplit2;

	sequenceFlow9.origin = actionActivity4;
	sequenceFlow9.destination = actionActivity5;

	sequenceFlow10.origin = exclusiveSplit2;
	sequenceFlow10.destination = endEvent1;

	sequenceFlow11.origin = exclusiveSplit2;
	sequenceFlow11.destination = actionActivity6;

	sequenceFlow12.origin = actionActivity6;
	sequenceFlow12.destination = actionActivity7;

	sequenceFlow13.origin = actionActivity7;
	sequenceFlow13.destination = endEvent2;

	sequenceFlow14.origin = actionActivity8;
	sequenceFlow14.destination = exclusiveMerge1;

})