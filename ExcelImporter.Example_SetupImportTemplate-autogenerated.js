(function (unit, model) {

	/*
	 * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
	 * from unit with id "f8d0dfa2-d4f7-4e2b-b4ec-0c2678ad4694" of type Microflows$Microflow
	 * in working copy "SoccerSquad"
	 * on 20-12-2024.
	 */

	var startEvent1 = microflows.StartEvent.create(model);
	startEvent1.relativeMiddlePoint = {"x":1295,"y":200};
	startEvent1.size = {"width":20,"height":20};

	var microflowCallParameterMapping1 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping1.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Template");
	microflowCallParameterMapping1.argument = "$Template";

	var microflowCallParameterMapping2 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping2.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Attribute");
	microflowCallParameterMapping2.argument = "'Date'";

	var microflowCallParameterMapping3 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping3.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColNr");
	microflowCallParameterMapping3.argument = "0";

	var microflowCallParameterMapping4 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping4.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColumnList");
	microflowCallParameterMapping4.argument = "$ColumnList";

	var microflowCallParameterMapping5 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping5.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.IsKey");
	microflowCallParameterMapping5.argument = "ExcelImporter.YesNo.Yes";

	var microflowCallParameterMapping6 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping6.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.MFName");
	microflowCallParameterMapping6.argument = "'TimeWriting.ParseDate'";

	var microflowCall1 = microflows.MicroflowCall.create(model);
	microflowCall1.microflow = model.findMicroflowByQualifiedName("ExcelImporter.SetupColumn");
	microflowCall1.parameterMappings.push(microflowCallParameterMapping1);
	microflowCall1.parameterMappings.push(microflowCallParameterMapping2);
	microflowCall1.parameterMappings.push(microflowCallParameterMapping3);
	microflowCall1.parameterMappings.push(microflowCallParameterMapping4);
	microflowCall1.parameterMappings.push(microflowCallParameterMapping5);
	microflowCall1.parameterMappings.push(microflowCallParameterMapping6);

	var microflowCallAction1 = microflows.MicroflowCallAction.create(model);
	microflowCallAction1.microflowCall = microflowCall1;   // Note: for this property a default value is defined.
	microflowCallAction1.outputVariableName = "Variable";

	var actionActivity1 = microflows.ActionActivity.create(model);
	actionActivity1.relativeMiddlePoint = {"x":1805,"y":200};
	actionActivity1.size = {"width":120,"height":60};
	actionActivity1.action = microflowCallAction1;
	actionActivity1.caption = "Column 0, Date";
	actionActivity1.autoGenerateCaption = false;

	var associationRetrieveSource1 = microflows.AssociationRetrieveSource.create(model);
	associationRetrieveSource1.startVariableName = "Template";
	associationRetrieveSource1.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_Template");

	var retrieveAction1 = microflows.RetrieveAction.create(model);
	retrieveAction1.retrieveSource = associationRetrieveSource1;   // Note: for this property a default value is defined.
	retrieveAction1.outputVariableName = "ColumnList";

	var actionActivity2 = microflows.ActionActivity.create(model);
	actionActivity2.relativeMiddlePoint = {"x":1600,"y":200};
	actionActivity2.size = {"width":200,"height":60};
	actionActivity2.action = retrieveAction1;

	var microflowCallParameterMapping7 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping7.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Template");
	microflowCallParameterMapping7.argument = "$Template";

	var microflowCallParameterMapping8 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping8.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Attribute");
	microflowCallParameterMapping8.argument = "'ResourceName'";

	var microflowCallParameterMapping9 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping9.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColNr");
	microflowCallParameterMapping9.argument = "1";

	var microflowCallParameterMapping10 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping10.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColumnList");
	microflowCallParameterMapping10.argument = "$ColumnList";

	var microflowCallParameterMapping11 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping11.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.IsKey");
	microflowCallParameterMapping11.argument = "ExcelImporter.YesNo.Yes";

	var microflowCallParameterMapping12 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping12.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.MFName");
	microflowCallParameterMapping12.argument = "empty";

	var microflowCall2 = microflows.MicroflowCall.create(model);
	microflowCall2.microflow = model.findMicroflowByQualifiedName("ExcelImporter.SetupColumn");
	microflowCall2.parameterMappings.push(microflowCallParameterMapping7);
	microflowCall2.parameterMappings.push(microflowCallParameterMapping8);
	microflowCall2.parameterMappings.push(microflowCallParameterMapping9);
	microflowCall2.parameterMappings.push(microflowCallParameterMapping10);
	microflowCall2.parameterMappings.push(microflowCallParameterMapping11);
	microflowCall2.parameterMappings.push(microflowCallParameterMapping12);

	var microflowCallAction2 = microflows.MicroflowCallAction.create(model);
	microflowCallAction2.microflowCall = microflowCall2;   // Note: for this property a default value is defined.
	microflowCallAction2.outputVariableName = "Variable";

	var actionActivity3 = microflows.ActionActivity.create(model);
	actionActivity3.relativeMiddlePoint = {"x":1960,"y":200};
	actionActivity3.size = {"width":120,"height":60};
	actionActivity3.action = microflowCallAction2;
	actionActivity3.caption = "Column 1, ResourceName";
	actionActivity3.autoGenerateCaption = false;

	var microflowCallParameterMapping13 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping13.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Template");
	microflowCallParameterMapping13.argument = "$Template";

	var microflowCallParameterMapping14 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping14.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Attribute");
	microflowCallParameterMapping14.argument = "'Allocation'";

	var microflowCallParameterMapping15 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping15.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColNr");
	microflowCallParameterMapping15.argument = "2";

	var microflowCallParameterMapping16 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping16.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColumnList");
	microflowCallParameterMapping16.argument = "$ColumnList";

	var microflowCallParameterMapping17 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping17.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.IsKey");
	microflowCallParameterMapping17.argument = "ExcelImporter.YesNo.Yes";

	var microflowCallParameterMapping18 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping18.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.MFName");
	microflowCallParameterMapping18.argument = "empty";

	var microflowCall3 = microflows.MicroflowCall.create(model);
	microflowCall3.microflow = model.findMicroflowByQualifiedName("ExcelImporter.SetupColumn");
	microflowCall3.parameterMappings.push(microflowCallParameterMapping13);
	microflowCall3.parameterMappings.push(microflowCallParameterMapping14);
	microflowCall3.parameterMappings.push(microflowCallParameterMapping15);
	microflowCall3.parameterMappings.push(microflowCallParameterMapping16);
	microflowCall3.parameterMappings.push(microflowCallParameterMapping17);
	microflowCall3.parameterMappings.push(microflowCallParameterMapping18);

	var microflowCallAction3 = microflows.MicroflowCallAction.create(model);
	microflowCallAction3.microflowCall = microflowCall3;   // Note: for this property a default value is defined.
	microflowCallAction3.outputVariableName = "Variable";

	var actionActivity4 = microflows.ActionActivity.create(model);
	actionActivity4.relativeMiddlePoint = {"x":2110,"y":200};
	actionActivity4.size = {"width":120,"height":60};
	actionActivity4.action = microflowCallAction3;
	actionActivity4.caption = "Column 2, Allocation";
	actionActivity4.autoGenerateCaption = false;

	var microflowCallParameterMapping19 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping19.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Template");
	microflowCallParameterMapping19.argument = "$Template";

	var microflowCallParameterMapping20 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping20.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Attribute");
	microflowCallParameterMapping20.argument = "'Amount'";

	var microflowCallParameterMapping21 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping21.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColNr");
	microflowCallParameterMapping21.argument = "3";

	var microflowCallParameterMapping22 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping22.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColumnList");
	microflowCallParameterMapping22.argument = "$ColumnList";

	var microflowCallParameterMapping23 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping23.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.IsKey");
	microflowCallParameterMapping23.argument = "ExcelImporter.YesNo.No";

	var microflowCallParameterMapping24 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping24.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.MFName");
	microflowCallParameterMapping24.argument = "empty";

	var microflowCall4 = microflows.MicroflowCall.create(model);
	microflowCall4.microflow = model.findMicroflowByQualifiedName("ExcelImporter.SetupColumn");
	microflowCall4.parameterMappings.push(microflowCallParameterMapping19);
	microflowCall4.parameterMappings.push(microflowCallParameterMapping20);
	microflowCall4.parameterMappings.push(microflowCallParameterMapping21);
	microflowCall4.parameterMappings.push(microflowCallParameterMapping22);
	microflowCall4.parameterMappings.push(microflowCallParameterMapping23);
	microflowCall4.parameterMappings.push(microflowCallParameterMapping24);

	var microflowCallAction4 = microflows.MicroflowCallAction.create(model);
	microflowCallAction4.microflowCall = microflowCall4;   // Note: for this property a default value is defined.
	microflowCallAction4.outputVariableName = "Variable";

	var actionActivity5 = microflows.ActionActivity.create(model);
	actionActivity5.relativeMiddlePoint = {"x":2270,"y":200};
	actionActivity5.size = {"width":120,"height":60};
	actionActivity5.action = microflowCallAction4;
	actionActivity5.caption = "Column 3, Amount";
	actionActivity5.autoGenerateCaption = false;

	var microflowCallParameterMapping25 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping25.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Template");
	microflowCallParameterMapping25.argument = "$Template";

	var microflowCallParameterMapping26 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping26.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Attribute");
	microflowCallParameterMapping26.argument = "'Description'";

	var microflowCallParameterMapping27 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping27.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColNr");
	microflowCallParameterMapping27.argument = "4";

	var microflowCallParameterMapping28 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping28.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColumnList");
	microflowCallParameterMapping28.argument = "$ColumnList";

	var microflowCallParameterMapping29 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping29.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.IsKey");
	microflowCallParameterMapping29.argument = "ExcelImporter.YesNo.Yes";

	var microflowCallParameterMapping30 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping30.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.MFName");
	microflowCallParameterMapping30.argument = "empty";

	var microflowCall5 = microflows.MicroflowCall.create(model);
	microflowCall5.microflow = model.findMicroflowByQualifiedName("ExcelImporter.SetupColumn");
	microflowCall5.parameterMappings.push(microflowCallParameterMapping25);
	microflowCall5.parameterMappings.push(microflowCallParameterMapping26);
	microflowCall5.parameterMappings.push(microflowCallParameterMapping27);
	microflowCall5.parameterMappings.push(microflowCallParameterMapping28);
	microflowCall5.parameterMappings.push(microflowCallParameterMapping29);
	microflowCall5.parameterMappings.push(microflowCallParameterMapping30);

	var microflowCallAction5 = microflows.MicroflowCallAction.create(model);
	microflowCallAction5.microflowCall = microflowCall5;   // Note: for this property a default value is defined.
	microflowCallAction5.outputVariableName = "Variable";

	var actionActivity6 = microflows.ActionActivity.create(model);
	actionActivity6.relativeMiddlePoint = {"x":2425,"y":200};
	actionActivity6.size = {"width":120,"height":60};
	actionActivity6.action = microflowCallAction5;
	actionActivity6.caption = "Column 4, Description";
	actionActivity6.autoGenerateCaption = false;

	var commitAction1 = microflows.CommitAction.create(model);
	commitAction1.commitVariableName = "ColumnList";

	var actionActivity7 = microflows.ActionActivity.create(model);
	actionActivity7.relativeMiddlePoint = {"x":2775,"y":200};
	actionActivity7.size = {"width":120,"height":60};
	actionActivity7.action = commitAction1;

	var commitAction2 = microflows.CommitAction.create(model);
	commitAction2.commitVariableName = "Template";

	var actionActivity8 = microflows.ActionActivity.create(model);
	actionActivity8.relativeMiddlePoint = {"x":2910,"y":200};
	actionActivity8.size = {"width":100,"height":60};
	actionActivity8.action = commitAction2;

	var endEvent1 = microflows.EndEvent.create(model);
	endEvent1.relativeMiddlePoint = {"x":3015,"y":200};
	endEvent1.size = {"width":20,"height":20};
	endEvent1.returnValue = "$Template";

	var microflowCallParameterMapping31 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping31.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Template");
	microflowCallParameterMapping31.argument = "$Template";

	var microflowCallParameterMapping32 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping32.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.Attribute");
	microflowCallParameterMapping32.argument = "'Billable'";

	var microflowCallParameterMapping33 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping33.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColNr");
	microflowCallParameterMapping33.argument = "5";

	var microflowCallParameterMapping34 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping34.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.ColumnList");
	microflowCallParameterMapping34.argument = "$ColumnList";

	var microflowCallParameterMapping35 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping35.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.IsKey");
	microflowCallParameterMapping35.argument = "ExcelImporter.YesNo.No";

	var microflowCallParameterMapping36 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping36.__parameter.updateWithRawValue("ExcelImporter.SetupColumn.MFName");
	microflowCallParameterMapping36.argument = "empty";

	var microflowCall6 = microflows.MicroflowCall.create(model);
	microflowCall6.microflow = model.findMicroflowByQualifiedName("ExcelImporter.SetupColumn");
	microflowCall6.parameterMappings.push(microflowCallParameterMapping31);
	microflowCall6.parameterMappings.push(microflowCallParameterMapping32);
	microflowCall6.parameterMappings.push(microflowCallParameterMapping33);
	microflowCall6.parameterMappings.push(microflowCallParameterMapping34);
	microflowCall6.parameterMappings.push(microflowCallParameterMapping35);
	microflowCall6.parameterMappings.push(microflowCallParameterMapping36);

	var microflowCallAction6 = microflows.MicroflowCallAction.create(model);
	microflowCallAction6.microflowCall = microflowCall6;   // Note: for this property a default value is defined.
	microflowCallAction6.outputVariableName = "Variable";

	var actionActivity9 = microflows.ActionActivity.create(model);
	actionActivity9.relativeMiddlePoint = {"x":2580,"y":200};
	actionActivity9.size = {"width":120,"height":60};
	actionActivity9.action = microflowCallAction6;
	actionActivity9.caption = "Column 5, Billable";
	actionActivity9.autoGenerateCaption = false;

	var microflowCallParameterMapping37 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping37.__parameter.updateWithRawValue("ExcelImporter.SetupTemplate.TemplateName");
	microflowCallParameterMapping37.argument = "'TimeWritingImport-Auto'";

	var microflowCallParameterMapping38 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping38.__parameter.updateWithRawValue("ExcelImporter.SetupTemplate.ImportObjectTypeName");
	microflowCallParameterMapping38.argument = "'TimeWriting.TimeWritingEntry'";

	var microflowCallParameterMapping39 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping39.__parameter.updateWithRawValue("ExcelImporter.SetupTemplate.ParentReferenceName");
	microflowCallParameterMapping39.argument = "'TimeWriting.TimeWritingEntry_Project'";

	var microflowCallParameterMapping40 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping40.__parameter.updateWithRawValue("ExcelImporter.SetupTemplate.DataRowNr");
	microflowCallParameterMapping40.argument = "2";

	var microflowCallParameterMapping41 = microflows.MicroflowCallParameterMapping.create(model);
	// Note: this is an unsupported internal property of the Model SDK which is subject to change.
	microflowCallParameterMapping41.__parameter.updateWithRawValue("ExcelImporter.SetupTemplate.ImportActions");
	microflowCallParameterMapping41.argument = "ExcelImporter.ImportActions.SynchronizeObjects";

	var microflowCall7 = microflows.MicroflowCall.create(model);
	microflowCall7.microflow = model.findMicroflowByQualifiedName("ExcelImporter.SetupTemplate");
	microflowCall7.parameterMappings.push(microflowCallParameterMapping37);
	microflowCall7.parameterMappings.push(microflowCallParameterMapping38);
	microflowCall7.parameterMappings.push(microflowCallParameterMapping39);
	microflowCall7.parameterMappings.push(microflowCallParameterMapping40);
	microflowCall7.parameterMappings.push(microflowCallParameterMapping41);

	var microflowCallAction7 = microflows.MicroflowCallAction.create(model);
	microflowCallAction7.microflowCall = microflowCall7;   // Note: for this property a default value is defined.
	microflowCallAction7.outputVariableName = "Template";

	var actionActivity10 = microflows.ActionActivity.create(model);
	actionActivity10.relativeMiddlePoint = {"x":1395,"y":200};
	actionActivity10.size = {"width":120,"height":60};
	actionActivity10.action = microflowCallAction7;

	var microflowObjectCollection1 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection1.objects.push(startEvent1);
	microflowObjectCollection1.objects.push(actionActivity1);
	microflowObjectCollection1.objects.push(actionActivity2);
	microflowObjectCollection1.objects.push(actionActivity3);
	microflowObjectCollection1.objects.push(actionActivity4);
	microflowObjectCollection1.objects.push(actionActivity5);
	microflowObjectCollection1.objects.push(actionActivity6);
	microflowObjectCollection1.objects.push(actionActivity7);
	microflowObjectCollection1.objects.push(actionActivity8);
	microflowObjectCollection1.objects.push(endEvent1);
	microflowObjectCollection1.objects.push(actionActivity9);
	microflowObjectCollection1.objects.push(actionActivity10);

	var noCase1 = microflows.NoCase.create(model);

	var sequenceFlow1 = microflows.SequenceFlow.create(model);
	sequenceFlow1.originConnectionIndex = 1;
	sequenceFlow1.destinationConnectionIndex = 3;
	sequenceFlow1.originBezierVector = {"width":0,"height":0};
	sequenceFlow1.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow1.caseValue = noCase1;   // Note: for this property a default value is defined.

	var noCase2 = microflows.NoCase.create(model);

	var sequenceFlow2 = microflows.SequenceFlow.create(model);
	sequenceFlow2.originConnectionIndex = 1;
	sequenceFlow2.destinationConnectionIndex = 3;
	sequenceFlow2.originBezierVector = {"width":30,"height":0};
	sequenceFlow2.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow2.caseValue = noCase2;   // Note: for this property a default value is defined.

	var noCase3 = microflows.NoCase.create(model);

	var sequenceFlow3 = microflows.SequenceFlow.create(model);
	sequenceFlow3.originConnectionIndex = 1;
	sequenceFlow3.destinationConnectionIndex = 3;
	sequenceFlow3.originBezierVector = {"width":30,"height":0};
	sequenceFlow3.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow3.caseValue = noCase3;   // Note: for this property a default value is defined.

	var noCase4 = microflows.NoCase.create(model);

	var sequenceFlow4 = microflows.SequenceFlow.create(model);
	sequenceFlow4.originConnectionIndex = 1;
	sequenceFlow4.destinationConnectionIndex = 3;
	sequenceFlow4.originBezierVector = {"width":30,"height":0};
	sequenceFlow4.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow4.caseValue = noCase4;   // Note: for this property a default value is defined.

	var noCase5 = microflows.NoCase.create(model);

	var sequenceFlow5 = microflows.SequenceFlow.create(model);
	sequenceFlow5.originConnectionIndex = 1;
	sequenceFlow5.destinationConnectionIndex = 3;
	sequenceFlow5.originBezierVector = {"width":30,"height":0};
	sequenceFlow5.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow5.caseValue = noCase5;   // Note: for this property a default value is defined.

	var noCase6 = microflows.NoCase.create(model);

	var sequenceFlow6 = microflows.SequenceFlow.create(model);
	sequenceFlow6.originConnectionIndex = 1;
	sequenceFlow6.destinationConnectionIndex = 3;
	sequenceFlow6.originBezierVector = {"width":30,"height":0};
	sequenceFlow6.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow6.caseValue = noCase6;   // Note: for this property a default value is defined.

	var noCase7 = microflows.NoCase.create(model);

	var sequenceFlow7 = microflows.SequenceFlow.create(model);
	sequenceFlow7.originConnectionIndex = 1;
	sequenceFlow7.destinationConnectionIndex = 3;
	sequenceFlow7.originBezierVector = {"width":30,"height":0};
	sequenceFlow7.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow7.caseValue = noCase7;   // Note: for this property a default value is defined.

	var noCase8 = microflows.NoCase.create(model);

	var sequenceFlow8 = microflows.SequenceFlow.create(model);
	sequenceFlow8.originConnectionIndex = 1;
	sequenceFlow8.destinationConnectionIndex = 3;
	sequenceFlow8.originBezierVector = {"width":30,"height":0};
	sequenceFlow8.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow8.caseValue = noCase8;   // Note: for this property a default value is defined.

	var noCase9 = microflows.NoCase.create(model);

	var sequenceFlow9 = microflows.SequenceFlow.create(model);
	sequenceFlow9.originConnectionIndex = 1;
	sequenceFlow9.destinationConnectionIndex = 3;
	sequenceFlow9.originBezierVector = {"width":30,"height":0};
	sequenceFlow9.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow9.caseValue = noCase9;   // Note: for this property a default value is defined.

	var noCase10 = microflows.NoCase.create(model);

	var sequenceFlow10 = microflows.SequenceFlow.create(model);
	sequenceFlow10.originConnectionIndex = 1;
	sequenceFlow10.destinationConnectionIndex = 3;
	sequenceFlow10.originBezierVector = {"width":30,"height":0};
	sequenceFlow10.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow10.caseValue = noCase10;   // Note: for this property a default value is defined.

	var noCase11 = microflows.NoCase.create(model);

	var sequenceFlow11 = microflows.SequenceFlow.create(model);
	sequenceFlow11.originConnectionIndex = 1;
	sequenceFlow11.destinationConnectionIndex = 3;
	sequenceFlow11.originBezierVector = {"width":30,"height":0};
	sequenceFlow11.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow11.caseValue = noCase11;   // Note: for this property a default value is defined.

	var objectType1 = datatypes.ObjectType.create(model);
	objectType1.entity = model.findEntityByQualifiedName("ExcelImporter.Template");

	var translation1 = texts.Translation.create(model);
	translation1.languageCode = "en_US";

	var text1 = texts.Text.create(model);
	text1.translations.push(translation1);

	var example_SetupImportTemplate1 = microflows.Microflow.createIn(unit);
	example_SetupImportTemplate1.name = "Example_SetupImportTemplate";
	example_SetupImportTemplate1.excluded = true;
	example_SetupImportTemplate1.objectCollection = microflowObjectCollection1;   // Note: for this property a default value is defined.
	example_SetupImportTemplate1.flows.push(sequenceFlow1);
	example_SetupImportTemplate1.flows.push(sequenceFlow2);
	example_SetupImportTemplate1.flows.push(sequenceFlow3);
	example_SetupImportTemplate1.flows.push(sequenceFlow4);
	example_SetupImportTemplate1.flows.push(sequenceFlow5);
	example_SetupImportTemplate1.flows.push(sequenceFlow6);
	example_SetupImportTemplate1.flows.push(sequenceFlow7);
	example_SetupImportTemplate1.flows.push(sequenceFlow8);
	example_SetupImportTemplate1.flows.push(sequenceFlow9);
	example_SetupImportTemplate1.flows.push(sequenceFlow10);
	example_SetupImportTemplate1.flows.push(sequenceFlow11);
	example_SetupImportTemplate1.microflowReturnType = objectType1;
	example_SetupImportTemplate1.concurrencyErrorMessage = text1;   // Note: for this property a default value is defined.

	sequenceFlow1.origin = startEvent1;
	sequenceFlow1.destination = actionActivity10;

	sequenceFlow2.origin = actionActivity2;
	sequenceFlow2.destination = actionActivity1;

	sequenceFlow3.origin = actionActivity1;
	sequenceFlow3.destination = actionActivity3;

	sequenceFlow4.origin = actionActivity3;
	sequenceFlow4.destination = actionActivity4;

	sequenceFlow5.origin = actionActivity4;
	sequenceFlow5.destination = actionActivity5;

	sequenceFlow6.origin = actionActivity5;
	sequenceFlow6.destination = actionActivity6;

	sequenceFlow7.origin = actionActivity6;
	sequenceFlow7.destination = actionActivity9;

	sequenceFlow8.origin = actionActivity7;
	sequenceFlow8.destination = actionActivity8;

	sequenceFlow9.origin = actionActivity8;
	sequenceFlow9.destination = endEvent1;

	sequenceFlow10.origin = actionActivity9;
	sequenceFlow10.destination = actionActivity7;

	sequenceFlow11.origin = actionActivity10;
	sequenceFlow11.destination = actionActivity2;

})