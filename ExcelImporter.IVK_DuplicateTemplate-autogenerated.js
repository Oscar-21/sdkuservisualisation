(function (unit, model) {

	/*
	 * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
	 * from unit with id "1e1c72ba-1a2b-48b4-b072-a87865fe4ef0" of type Microflows$Microflow
	 * in working copy "SoccerSquad"
	 * on 20-12-2024.
	 */

	var constantRange1 = microflows.ConstantRange.create(model);

	var sortItemList1 = microflows.SortItemList.create(model);

	var databaseRetrieveSource1 = microflows.DatabaseRetrieveSource.create(model);
	databaseRetrieveSource1.entity = model.findEntityByQualifiedName("ExcelImporter.Column");
	databaseRetrieveSource1.range = constantRange1;   // Note: for this property a default value is defined.
	databaseRetrieveSource1.xPathConstraint = "[ExcelImporter.Column_Template = $Template]";
	databaseRetrieveSource1.sortItemList = sortItemList1;   // Note: for this property a default value is defined.

	var retrieveAction1 = microflows.RetrieveAction.create(model);
	retrieveAction1.retrieveSource = databaseRetrieveSource1;   // Note: for this property a default value is defined.
	retrieveAction1.outputVariableName = "ColumnList";

	var actionActivity1 = microflows.ActionActivity.create(model);
	actionActivity1.relativeMiddlePoint = {"x":530,"y":200};
	actionActivity1.size = {"width":160,"height":60};
	actionActivity1.action = retrieveAction1;
	actionActivity1.caption = "Retrieve the columns from the template parameter";
	actionActivity1.autoGenerateCaption = false;

	var associationRetrieveSource1 = microflows.AssociationRetrieveSource.create(model);
	associationRetrieveSource1.startVariableName = "Template";
	associationRetrieveSource1.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Template_AdditionalProperties");

	var retrieveAction2 = microflows.RetrieveAction.create(model);
	retrieveAction2.retrieveSource = associationRetrieveSource1;   // Note: for this property a default value is defined.
	retrieveAction2.outputVariableName = "AdditionalProperties_Copy";

	var actionActivity2 = microflows.ActionActivity.create(model);
	actionActivity2.relativeMiddlePoint = {"x":1135,"y":200};
	actionActivity2.size = {"width":120,"height":60};
	actionActivity2.action = retrieveAction2;
	actionActivity2.caption = "Retrieve the new additional properties";
	actionActivity2.autoGenerateCaption = false;

	var associationRetrieveSource2 = microflows.AssociationRetrieveSource.create(model);
	associationRetrieveSource2.startVariableName = "Template";
	associationRetrieveSource2.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Template_AdditionalProperties");

	var retrieveAction3 = microflows.RetrieveAction.create(model);
	retrieveAction3.retrieveSource = associationRetrieveSource2;   // Note: for this property a default value is defined.
	retrieveAction3.outputVariableName = "AdditionalProperties";

	var actionActivity3 = microflows.ActionActivity.create(model);
	actionActivity3.relativeMiddlePoint = {"x":980,"y":200};
	actionActivity3.size = {"width":110,"height":60};
	actionActivity3.action = retrieveAction3;
	actionActivity3.caption = "Retrieve the additional properties";
	actionActivity3.autoGenerateCaption = false;

	var memberChange1 = microflows.MemberChange.create(model);
	memberChange1.attribute = model.findAttributeByQualifiedName("ExcelImporter.AdditionalProperties.PrintStatisticsMessages");
	memberChange1.value = "$AdditionalProperties/PrintStatisticsMessages";

	var memberChange2 = microflows.MemberChange.create(model);
	memberChange2.attribute = model.findAttributeByQualifiedName("ExcelImporter.AdditionalProperties.PrintNotFoundMessages_MainObject");
	memberChange2.value = "$AdditionalProperties/PrintNotFoundMessages_MainObject";

	var memberChange3 = microflows.MemberChange.create(model);
	memberChange3.attribute = model.findAttributeByQualifiedName("ExcelImporter.AdditionalProperties.IgnoreEmptyKeys");
	memberChange3.value = "$AdditionalProperties/IgnoreEmptyKeys";

	var memberChange4 = microflows.MemberChange.create(model);
	memberChange4.attribute = model.findAttributeByQualifiedName("ExcelImporter.AdditionalProperties.CommitUnchangedObjects_MainObject");
	memberChange4.value = "$AdditionalProperties/CommitUnchangedObjects_MainObject";

	var memberChange5 = microflows.MemberChange.create(model);
	memberChange5.attribute = model.findAttributeByQualifiedName("ExcelImporter.AdditionalProperties.RemoveUnsyncedObjects");
	memberChange5.value = "$AdditionalProperties/RemoveUnsyncedObjects";

	var memberChange6 = microflows.MemberChange.create(model);
	memberChange6.attribute = model.findAttributeByQualifiedName("ExcelImporter.AdditionalProperties.ResetEmptyAssociations");
	memberChange6.value = "$AdditionalProperties/ResetEmptyAssociations";

	var memberChange7 = microflows.MemberChange.create(model);
	memberChange7.association = model.findAssociationBaseByQualifiedName("ExcelImporter.AdditionalProperties_MxObjectMember_RemoveIndicator");
	memberChange7.value = "$AdditionalProperties/ExcelImporter.AdditionalProperties_MxObjectMember_RemoveIndicator";

	var changeObjectAction1 = microflows.ChangeObjectAction.create(model);
	changeObjectAction1.items.push(memberChange1);
	changeObjectAction1.items.push(memberChange2);
	changeObjectAction1.items.push(memberChange3);
	changeObjectAction1.items.push(memberChange4);
	changeObjectAction1.items.push(memberChange5);
	changeObjectAction1.items.push(memberChange6);
	changeObjectAction1.items.push(memberChange7);
	changeObjectAction1.refreshInClient = true;
	changeObjectAction1.commit = microflows.CommitEnum.Yes;
	changeObjectAction1.changeVariableName = "AdditionalProperties_Copy";

	var actionActivity4 = microflows.ActionActivity.create(model);
	actionActivity4.relativeMiddlePoint = {"x":1270,"y":200};
	actionActivity4.size = {"width":100,"height":60};
	actionActivity4.action = changeObjectAction1;
	actionActivity4.caption = "Copy the properties";
	actionActivity4.autoGenerateCaption = false;

	var endEvent1 = microflows.EndEvent.create(model);
	endEvent1.relativeMiddlePoint = {"x":2140,"y":200};
	endEvent1.size = {"width":20,"height":20};
	endEvent1.returnValue = "$NewTemplate";

	var changeObjectAction2 = microflows.ChangeObjectAction.create(model);
	changeObjectAction2.refreshInClient = true;
	changeObjectAction2.commit = microflows.CommitEnum.Yes;
	changeObjectAction2.changeVariableName = "NewTemplate";

	var actionActivity5 = microflows.ActionActivity.create(model);
	actionActivity5.relativeMiddlePoint = {"x":2015,"y":200};
	actionActivity5.size = {"width":120,"height":60};
	actionActivity5.action = changeObjectAction2;
	actionActivity5.caption = "Commit and refresh the new template";
	actionActivity5.autoGenerateCaption = false;

	var createObjectAction1 = microflows.CreateObjectAction.create(model);
	createObjectAction1.entity = model.findEntityByQualifiedName("ExcelImporter.Template");
	createObjectAction1.outputVariableName = "NewTemplate";

	var actionActivity6 = microflows.ActionActivity.create(model);
	actionActivity6.relativeMiddlePoint = {"x":180,"y":200};
	actionActivity6.size = {"width":120,"height":60};
	actionActivity6.action = createObjectAction1;
	actionActivity6.caption = "Create the tempalte copy";
	actionActivity6.autoGenerateCaption = false;

	var startEvent1 = microflows.StartEvent.create(model);
	startEvent1.relativeMiddlePoint = {"x":75,"y":200};
	startEvent1.size = {"width":20,"height":20};

	var objectType1 = datatypes.ObjectType.create(model);
	objectType1.entity = model.findEntityByQualifiedName("ExcelImporter.Template");

	var template1 = microflows.MicroflowParameterObject.create(model);
	template1.relativeMiddlePoint = {"x":75,"y":110};
	template1.size = {"width":30,"height":30};
	template1.name = "Template";
	template1.variableType = objectType1;   // Note: for this property a default value is defined.

	var memberChange8 = microflows.MemberChange.create(model);
	memberChange8.attribute = model.findAttributeByQualifiedName("ExcelImporter.Template.Title");
	memberChange8.value = "$Template/Title";

	var memberChange9 = microflows.MemberChange.create(model);
	memberChange9.attribute = model.findAttributeByQualifiedName("ExcelImporter.Template.Description");
	memberChange9.value = "$Template/Description";

	var memberChange10 = microflows.MemberChange.create(model);
	memberChange10.attribute = model.findAttributeByQualifiedName("ExcelImporter.Template.SheetIndex");
	memberChange10.value = "$Template/SheetIndex";

	var memberChange11 = microflows.MemberChange.create(model);
	memberChange11.attribute = model.findAttributeByQualifiedName("ExcelImporter.Template.HeaderRowNumber");
	memberChange11.value = "$Template/HeaderRowNumber";

	var memberChange12 = microflows.MemberChange.create(model);
	memberChange12.attribute = model.findAttributeByQualifiedName("ExcelImporter.Template.FirstDataRowNumber");
	memberChange12.value = "$Template/FirstDataRowNumber";

	var memberChange13 = microflows.MemberChange.create(model);
	memberChange13.attribute = model.findAttributeByQualifiedName("ExcelImporter.Template.ImportAction");
	memberChange13.value = "$Template/ImportAction";

	var memberChange14 = microflows.MemberChange.create(model);
	memberChange14.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Template_MxObjectType");
	memberChange14.value = "$Template/ExcelImporter.Template_MxObjectType";

	var memberChange15 = microflows.MemberChange.create(model);
	memberChange15.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Template_MxObjectReference_ParentAssociation");
	memberChange15.value = "$Template/ExcelImporter.Template_MxObjectReference_ParentAssociation";

	var memberChange16 = microflows.MemberChange.create(model);
	memberChange16.attribute = model.findAttributeByQualifiedName("ExcelImporter.Template.TemplateType");
	memberChange16.value = "$Template/TemplateType";

	var changeObjectAction3 = microflows.ChangeObjectAction.create(model);
	changeObjectAction3.items.push(memberChange8);
	changeObjectAction3.items.push(memberChange9);
	changeObjectAction3.items.push(memberChange10);
	changeObjectAction3.items.push(memberChange11);
	changeObjectAction3.items.push(memberChange12);
	changeObjectAction3.items.push(memberChange13);
	changeObjectAction3.items.push(memberChange14);
	changeObjectAction3.items.push(memberChange15);
	changeObjectAction3.items.push(memberChange16);
	changeObjectAction3.changeVariableName = "NewTemplate";

	var actionActivity7 = microflows.ActionActivity.create(model);
	actionActivity7.relativeMiddlePoint = {"x":345,"y":200};
	actionActivity7.size = {"width":150,"height":60};
	actionActivity7.action = changeObjectAction3;
	actionActivity7.caption = "Copy the attributes and associations";
	actionActivity7.autoGenerateCaption = false;

	var createObjectAction2 = microflows.CreateObjectAction.create(model);
	createObjectAction2.entity = model.findEntityByQualifiedName("ExcelImporter.Column");
	createObjectAction2.outputVariableName = "NewColumn";

	var actionActivity8 = microflows.ActionActivity.create(model);
	actionActivity8.relativeMiddlePoint = {"x":145,"y":45};
	actionActivity8.size = {"width":120,"height":60};
	actionActivity8.action = createObjectAction2;
	actionActivity8.caption = "Create a the column copy";
	actionActivity8.autoGenerateCaption = false;

	var memberChange17 = microflows.MemberChange.create(model);
	memberChange17.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.ColNumber");
	memberChange17.value = "$Column/ColNumber";

	var memberChange18 = microflows.MemberChange.create(model);
	memberChange18.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.Text");
	memberChange18.value = "$Column/Text";

	var memberChange19 = microflows.MemberChange.create(model);
	memberChange19.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.MappingType");
	memberChange19.value = "$Column/MappingType";

	var memberChange20 = microflows.MemberChange.create(model);
	memberChange20.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.IsKey");
	memberChange20.value = "$Column/IsKey";

	var memberChange21 = microflows.MemberChange.create(model);
	memberChange21.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.IsReferenceKey");
	memberChange21.value = "$Column/IsReferenceKey";

	var memberChange22 = microflows.MemberChange.create(model);
	memberChange22.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.Status");
	memberChange22.value = "$Column/Status";

	var memberChange23 = microflows.MemberChange.create(model);
	memberChange23.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.Details");
	memberChange23.value = "$Column/Details";

	var memberChange24 = microflows.MemberChange.create(model);
	memberChange24.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.CaseSensitive");
	memberChange24.value = "$Column/CaseSensitive";

	var memberChange25 = microflows.MemberChange.create(model);
	memberChange25.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_Template");
	memberChange25.value = "$NewTemplate";

	var memberChange26 = microflows.MemberChange.create(model);
	memberChange26.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_MxObjectType_Reference");
	memberChange26.value = "$Column/ExcelImporter.Column_MxObjectType_Reference";

	var memberChange27 = microflows.MemberChange.create(model);
	memberChange27.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_MxObjectType");
	memberChange27.value = "$Column/ExcelImporter.Column_MxObjectType";

	var memberChange28 = microflows.MemberChange.create(model);
	memberChange28.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_MxObjectMember");
	memberChange28.value = "$Column/ExcelImporter.Column_MxObjectMember";

	var memberChange29 = microflows.MemberChange.create(model);
	memberChange29.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_MxObjectMember_Reference");
	memberChange29.value = "$Column/ExcelImporter.Column_MxObjectMember_Reference";

	var memberChange30 = microflows.MemberChange.create(model);
	memberChange30.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_MxObjectReference");
	memberChange30.value = "$Column/ExcelImporter.Column_MxObjectReference";

	var memberChange31 = microflows.MemberChange.create(model);
	memberChange31.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_Microflows");
	memberChange31.value = "$Column/ExcelImporter.Column_Microflows";

	var memberChange32 = microflows.MemberChange.create(model);
	memberChange32.association = model.findAssociationBaseByQualifiedName("ExcelImporter.Column_ValueType");
	memberChange32.value = "$Column/ExcelImporter.Column_ValueType";

	var memberChange33 = microflows.MemberChange.create(model);
	memberChange33.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.FindAttribute");
	memberChange33.value = "$Column/FindAttribute";

	var memberChange34 = microflows.MemberChange.create(model);
	memberChange34.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.FindReference");
	memberChange34.value = "$Column/FindReference";

	var memberChange35 = microflows.MemberChange.create(model);
	memberChange35.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.FindObjectType");
	memberChange35.value = "$Column/FindObjectType";

	var memberChange36 = microflows.MemberChange.create(model);
	memberChange36.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.FindMicroflow");
	memberChange36.value = "$Column/FindMicroflow";

	var memberChange37 = microflows.MemberChange.create(model);
	memberChange37.attribute = model.findAttributeByQualifiedName("ExcelImporter.Column.DataSource");
	memberChange37.value = "$Column/DataSource";

	var changeObjectAction4 = microflows.ChangeObjectAction.create(model);
	changeObjectAction4.items.push(memberChange17);
	changeObjectAction4.items.push(memberChange18);
	changeObjectAction4.items.push(memberChange19);
	changeObjectAction4.items.push(memberChange20);
	changeObjectAction4.items.push(memberChange21);
	changeObjectAction4.items.push(memberChange22);
	changeObjectAction4.items.push(memberChange23);
	changeObjectAction4.items.push(memberChange24);
	changeObjectAction4.items.push(memberChange25);
	changeObjectAction4.items.push(memberChange26);
	changeObjectAction4.items.push(memberChange27);
	changeObjectAction4.items.push(memberChange28);
	changeObjectAction4.items.push(memberChange29);
	changeObjectAction4.items.push(memberChange30);
	changeObjectAction4.items.push(memberChange31);
	changeObjectAction4.items.push(memberChange32);
	changeObjectAction4.items.push(memberChange33);
	changeObjectAction4.items.push(memberChange34);
	changeObjectAction4.items.push(memberChange35);
	changeObjectAction4.items.push(memberChange36);
	changeObjectAction4.items.push(memberChange37);
	changeObjectAction4.refreshInClient = true;
	changeObjectAction4.commit = microflows.CommitEnum.Yes;
	changeObjectAction4.changeVariableName = "NewColumn";

	var actionActivity9 = microflows.ActionActivity.create(model);
	actionActivity9.relativeMiddlePoint = {"x":145,"y":150};
	actionActivity9.size = {"width":140,"height":60};
	actionActivity9.action = changeObjectAction4;
	actionActivity9.caption = "Copy all column attributes";
	actionActivity9.autoGenerateCaption = false;

	var microflowObjectCollection1 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection1.objects.push(actionActivity8);
	microflowObjectCollection1.objects.push(actionActivity9);

	var iterableList1 = microflows.IterableList.create(model);
	iterableList1.listVariableName = "ColumnList";
	iterableList1.variableName = "Column";

	var loopedActivity1 = microflows.LoopedActivity.create(model);
	loopedActivity1.relativeMiddlePoint = {"x":760,"y":200};
	loopedActivity1.size = {"width":230,"height":190};
	loopedActivity1.objectCollection = microflowObjectCollection1;   // Note: for this property a default value is defined.
	loopedActivity1.loopSource = iterableList1;   // Note: for this property a default value is defined.

	var constantRange2 = microflows.ConstantRange.create(model);

	var sortItemList2 = microflows.SortItemList.create(model);

	var databaseRetrieveSource2 = microflows.DatabaseRetrieveSource.create(model);
	databaseRetrieveSource2.entity = model.findEntityByQualifiedName("ExcelImporter.ReferenceHandling");
	databaseRetrieveSource2.range = constantRange2;   // Note: for this property a default value is defined.
	databaseRetrieveSource2.xPathConstraint = "[ExcelImporter.ReferenceHandling_Template = $Template]";
	databaseRetrieveSource2.sortItemList = sortItemList2;   // Note: for this property a default value is defined.

	var retrieveAction4 = microflows.RetrieveAction.create(model);
	retrieveAction4.retrieveSource = databaseRetrieveSource2;   // Note: for this property a default value is defined.
	retrieveAction4.outputVariableName = "ReferenceHandlingList";

	var actionActivity10 = microflows.ActionActivity.create(model);
	actionActivity10.relativeMiddlePoint = {"x":1450,"y":200};
	actionActivity10.size = {"width":160,"height":60};
	actionActivity10.action = retrieveAction4;
	actionActivity10.caption = "Retrieve the columns from the template parameter";
	actionActivity10.autoGenerateCaption = false;

	var constantRange3 = microflows.ConstantRange.create(model);
	constantRange3.singleObject = true;

	var sortItemList3 = microflows.SortItemList.create(model);

	var databaseRetrieveSource3 = microflows.DatabaseRetrieveSource.create(model);
	databaseRetrieveSource3.entity = model.findEntityByQualifiedName("ExcelImporter.ReferenceHandling");
	databaseRetrieveSource3.range = constantRange3;   // Note: for this property a default value is defined.
	databaseRetrieveSource3.xPathConstraint = "[ExcelImporter.ReferenceHandling_Template = $NewTemplate]\n[ExcelImporter.ReferenceHandling_MxObjectReference=$ReferenceHandling/ExcelImporter.ReferenceHandling_MxObjectReference]";
	databaseRetrieveSource3.sortItemList = sortItemList3;   // Note: for this property a default value is defined.

	var retrieveAction5 = microflows.RetrieveAction.create(model);
	retrieveAction5.retrieveSource = databaseRetrieveSource3;   // Note: for this property a default value is defined.
	retrieveAction5.outputVariableName = "ReferenceHandling_copy";

	var actionActivity11 = microflows.ActionActivity.create(model);
	actionActivity11.relativeMiddlePoint = {"x":90,"y":130};
	actionActivity11.size = {"width":160,"height":60};
	actionActivity11.action = retrieveAction5;
	actionActivity11.caption = "Retrieve the columns from the template parameter";
	actionActivity11.autoGenerateCaption = false;

	var memberChange38 = microflows.MemberChange.create(model);
	memberChange38.attribute = model.findAttributeByQualifiedName("ExcelImporter.ReferenceHandling.Handling");
	memberChange38.value = "$ReferenceHandling/Handling";

	var memberChange39 = microflows.MemberChange.create(model);
	memberChange39.attribute = model.findAttributeByQualifiedName("ExcelImporter.ReferenceHandling.DataHandling");
	memberChange39.value = "$ReferenceHandling/DataHandling";

	var memberChange40 = microflows.MemberChange.create(model);
	memberChange40.attribute = model.findAttributeByQualifiedName("ExcelImporter.ReferenceHandling.PrintNotFoundMessages");
	memberChange40.value = "$ReferenceHandling/PrintNotFoundMessages";

	var memberChange41 = microflows.MemberChange.create(model);
	memberChange41.attribute = model.findAttributeByQualifiedName("ExcelImporter.ReferenceHandling.CommitUnchangedObjects");
	memberChange41.value = "$ReferenceHandling/CommitUnchangedObjects";

	var changeObjectAction5 = microflows.ChangeObjectAction.create(model);
	changeObjectAction5.items.push(memberChange38);
	changeObjectAction5.items.push(memberChange39);
	changeObjectAction5.items.push(memberChange40);
	changeObjectAction5.items.push(memberChange41);
	changeObjectAction5.commit = microflows.CommitEnum.Yes;
	changeObjectAction5.changeVariableName = "ReferenceHandling_copy";

	var actionActivity12 = microflows.ActionActivity.create(model);
	actionActivity12.relativeMiddlePoint = {"x":240,"y":130};
	actionActivity12.size = {"width":100,"height":60};
	actionActivity12.action = changeObjectAction5;
	actionActivity12.caption = "Copy all attributes";
	actionActivity12.autoGenerateCaption = false;

	var microflowObjectCollection2 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection2.objects.push(actionActivity11);
	microflowObjectCollection2.objects.push(actionActivity12);

	var iterableList2 = microflows.IterableList.create(model);
	iterableList2.listVariableName = "ReferenceHandlingList";
	iterableList2.variableName = "ReferenceHandling";

	var loopedActivity2 = microflows.LoopedActivity.create(model);
	loopedActivity2.relativeMiddlePoint = {"x":1725,"y":200};
	loopedActivity2.size = {"width":300,"height":200};
	loopedActivity2.objectCollection = microflowObjectCollection2;   // Note: for this property a default value is defined.
	loopedActivity2.loopSource = iterableList2;   // Note: for this property a default value is defined.

	var microflowObjectCollection3 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection3.objects.push(actionActivity1);
	microflowObjectCollection3.objects.push(actionActivity2);
	microflowObjectCollection3.objects.push(actionActivity3);
	microflowObjectCollection3.objects.push(actionActivity4);
	microflowObjectCollection3.objects.push(endEvent1);
	microflowObjectCollection3.objects.push(actionActivity5);
	microflowObjectCollection3.objects.push(actionActivity6);
	microflowObjectCollection3.objects.push(startEvent1);
	microflowObjectCollection3.objects.push(template1);
	microflowObjectCollection3.objects.push(actionActivity7);
	microflowObjectCollection3.objects.push(loopedActivity1);
	microflowObjectCollection3.objects.push(actionActivity10);
	microflowObjectCollection3.objects.push(loopedActivity2);

	var noCase1 = microflows.NoCase.create(model);

	var sequenceFlow1 = microflows.SequenceFlow.create(model);
	sequenceFlow1.originConnectionIndex = 1;
	sequenceFlow1.destinationConnectionIndex = 3;
	sequenceFlow1.originBezierVector = {"width":0,"height":0};
	sequenceFlow1.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow1.caseValue = noCase1;   // Note: for this property a default value is defined.

	var noCase2 = microflows.NoCase.create(model);

	var sequenceFlow2 = microflows.SequenceFlow.create(model);
	sequenceFlow2.originConnectionIndex = 1;
	sequenceFlow2.destinationConnectionIndex = 3;
	sequenceFlow2.originBezierVector = {"width":30,"height":0};
	sequenceFlow2.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow2.caseValue = noCase2;   // Note: for this property a default value is defined.

	var noCase3 = microflows.NoCase.create(model);

	var sequenceFlow3 = microflows.SequenceFlow.create(model);
	sequenceFlow3.originConnectionIndex = 1;
	sequenceFlow3.destinationConnectionIndex = 3;
	sequenceFlow3.originBezierVector = {"width":30,"height":0};
	sequenceFlow3.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow3.caseValue = noCase3;   // Note: for this property a default value is defined.

	var noCase4 = microflows.NoCase.create(model);

	var sequenceFlow4 = microflows.SequenceFlow.create(model);
	sequenceFlow4.originConnectionIndex = 1;
	sequenceFlow4.destinationConnectionIndex = 3;
	sequenceFlow4.originBezierVector = {"width":30,"height":0};
	sequenceFlow4.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow4.caseValue = noCase4;   // Note: for this property a default value is defined.

	var noCase5 = microflows.NoCase.create(model);

	var sequenceFlow5 = microflows.SequenceFlow.create(model);
	sequenceFlow5.originConnectionIndex = 2;
	sequenceFlow5.originBezierVector = {"width":0,"height":30};
	sequenceFlow5.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow5.caseValue = noCase5;   // Note: for this property a default value is defined.

	var noCase6 = microflows.NoCase.create(model);

	var sequenceFlow6 = microflows.SequenceFlow.create(model);
	sequenceFlow6.originConnectionIndex = 1;
	sequenceFlow6.destinationConnectionIndex = 3;
	sequenceFlow6.originBezierVector = {"width":30,"height":0};
	sequenceFlow6.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow6.caseValue = noCase6;   // Note: for this property a default value is defined.

	var noCase7 = microflows.NoCase.create(model);

	var sequenceFlow7 = microflows.SequenceFlow.create(model);
	sequenceFlow7.originConnectionIndex = 1;
	sequenceFlow7.destinationConnectionIndex = 3;
	sequenceFlow7.originBezierVector = {"width":30,"height":0};
	sequenceFlow7.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow7.caseValue = noCase7;   // Note: for this property a default value is defined.

	var noCase8 = microflows.NoCase.create(model);

	var sequenceFlow8 = microflows.SequenceFlow.create(model);
	sequenceFlow8.originConnectionIndex = 1;
	sequenceFlow8.destinationConnectionIndex = 3;
	sequenceFlow8.originBezierVector = {"width":30,"height":0};
	sequenceFlow8.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow8.caseValue = noCase8;   // Note: for this property a default value is defined.

	var noCase9 = microflows.NoCase.create(model);

	var sequenceFlow9 = microflows.SequenceFlow.create(model);
	sequenceFlow9.originConnectionIndex = 1;
	sequenceFlow9.destinationConnectionIndex = 3;
	sequenceFlow9.originBezierVector = {"width":30,"height":0};
	sequenceFlow9.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow9.caseValue = noCase9;   // Note: for this property a default value is defined.

	var noCase10 = microflows.NoCase.create(model);

	var sequenceFlow10 = microflows.SequenceFlow.create(model);
	sequenceFlow10.originConnectionIndex = 1;
	sequenceFlow10.destinationConnectionIndex = 3;
	sequenceFlow10.originBezierVector = {"width":30,"height":0};
	sequenceFlow10.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow10.caseValue = noCase10;   // Note: for this property a default value is defined.

	var noCase11 = microflows.NoCase.create(model);

	var sequenceFlow11 = microflows.SequenceFlow.create(model);
	sequenceFlow11.originConnectionIndex = 1;
	sequenceFlow11.destinationConnectionIndex = 3;
	sequenceFlow11.originBezierVector = {"width":30,"height":0};
	sequenceFlow11.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow11.caseValue = noCase11;   // Note: for this property a default value is defined.

	var noCase12 = microflows.NoCase.create(model);

	var sequenceFlow12 = microflows.SequenceFlow.create(model);
	sequenceFlow12.originConnectionIndex = 1;
	sequenceFlow12.destinationConnectionIndex = 3;
	sequenceFlow12.originBezierVector = {"width":30,"height":0};
	sequenceFlow12.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow12.caseValue = noCase12;   // Note: for this property a default value is defined.

	var noCase13 = microflows.NoCase.create(model);

	var sequenceFlow13 = microflows.SequenceFlow.create(model);
	sequenceFlow13.originConnectionIndex = 1;
	sequenceFlow13.destinationConnectionIndex = 3;
	sequenceFlow13.originBezierVector = {"width":30,"height":0};
	sequenceFlow13.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow13.caseValue = noCase13;   // Note: for this property a default value is defined.

	var objectType2 = datatypes.ObjectType.create(model);
	objectType2.entity = model.findEntityByQualifiedName("ExcelImporter.Template");

	var translation1 = texts.Translation.create(model);
	translation1.languageCode = "en_US";

	var translation2 = texts.Translation.create(model);
	translation2.languageCode = "en_GB";

	var translation3 = texts.Translation.create(model);
	translation3.languageCode = "en_ZA";

	var text1 = texts.Text.create(model);
	text1.translations.push(translation1);
	text1.translations.push(translation2);
	text1.translations.push(translation3);

	var iVK_DuplicateTemplate1 = microflows.Microflow.createIn(unit);
	iVK_DuplicateTemplate1.name = "IVK_DuplicateTemplate";
	iVK_DuplicateTemplate1.objectCollection = microflowObjectCollection3;   // Note: for this property a default value is defined.
	iVK_DuplicateTemplate1.flows.push(sequenceFlow1);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow2);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow3);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow4);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow5);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow6);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow7);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow8);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow9);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow10);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow11);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow12);
	iVK_DuplicateTemplate1.flows.push(sequenceFlow13);
	iVK_DuplicateTemplate1.microflowReturnType = objectType2;
	iVK_DuplicateTemplate1.allowedModuleRoles.push(model.findModuleRoleByQualifiedName("ExcelImporter.Configurator"));
	iVK_DuplicateTemplate1.concurrencyErrorMessage = text1;   // Note: for this property a default value is defined.

	sequenceFlow1.origin = startEvent1;
	sequenceFlow1.destination = actionActivity6;

	sequenceFlow2.origin = actionActivity6;
	sequenceFlow2.destination = actionActivity7;

	sequenceFlow3.origin = actionActivity7;
	sequenceFlow3.destination = actionActivity1;

	sequenceFlow4.origin = actionActivity1;
	sequenceFlow4.destination = loopedActivity1;

	sequenceFlow5.origin = actionActivity8;
	sequenceFlow5.destination = actionActivity9;

	sequenceFlow6.origin = loopedActivity1;
	sequenceFlow6.destination = actionActivity3;

	sequenceFlow7.origin = actionActivity3;
	sequenceFlow7.destination = actionActivity2;

	sequenceFlow8.origin = actionActivity2;
	sequenceFlow8.destination = actionActivity4;

	sequenceFlow9.origin = actionActivity4;
	sequenceFlow9.destination = actionActivity10;

	sequenceFlow10.origin = actionActivity5;
	sequenceFlow10.destination = endEvent1;

	sequenceFlow11.origin = actionActivity10;
	sequenceFlow11.destination = loopedActivity2;

	sequenceFlow12.origin = loopedActivity2;
	sequenceFlow12.destination = actionActivity5;

	sequenceFlow13.origin = actionActivity11;
	sequenceFlow13.destination = actionActivity12;

})