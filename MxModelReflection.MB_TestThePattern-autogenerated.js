(function (unit, model) {

	/*
	 * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
	 * from unit with id "33c99b88-0c6b-482d-bb29-518da26a3438" of type Microflows$Microflow
	 * in working copy "SoccerSquad"
	 * on 20-12-2024.
	 */

	var startEvent1 = microflows.StartEvent.create(model);
	startEvent1.relativeMiddlePoint = {"x":100,"y":160};
	startEvent1.size = {"width":20,"height":20};

	var objectType1 = datatypes.ObjectType.create(model);
	objectType1.entity = model.findEntityByQualifiedName("MxModelReflection.TestPattern");

	var testPattern1 = microflows.MicroflowParameterObject.create(model);
	testPattern1.relativeMiddlePoint = {"x":100,"y":80};
	testPattern1.size = {"width":30,"height":30};
	testPattern1.name = "TestPattern";
	testPattern1.variableType = objectType1;   // Note: for this property a default value is defined.

	var basicCodeActionParameterValue1 = microflows.BasicCodeActionParameterValue.create(model);
	basicCodeActionParameterValue1.argument = "$TestPattern\n";

	var javaActionParameterMapping1 = microflows.JavaActionParameterMapping.create(model);
	javaActionParameterMapping1.parameter = model.findJavaActionParameterByQualifiedName("MxModelReflection.TestThePattern.TestPatternObj");
	javaActionParameterMapping1.parameterValue = basicCodeActionParameterValue1;   // Note: for this property a default value is defined.

	var javaActionCallAction1 = microflows.JavaActionCallAction.create(model);
	javaActionCallAction1.errorHandlingType = microflows.ErrorHandlingType.Custom;
	javaActionCallAction1.javaAction = model.findJavaActionByQualifiedName("MxModelReflection.TestThePattern");
	javaActionCallAction1.parameterMappings.push(javaActionParameterMapping1);
	javaActionCallAction1.outputVariableName = "ignore";

	var actionActivity1 = microflows.ActionActivity.create(model);
	actionActivity1.relativeMiddlePoint = {"x":230,"y":160};
	actionActivity1.size = {"width":120,"height":60};
	actionActivity1.action = javaActionCallAction1;

	var templateArgument1 = microflows.TemplateArgument.create(model);
	templateArgument1.expression = "$latestError/Message";

	var templateArgument2 = microflows.TemplateArgument.create(model);
	templateArgument2.expression = "if length($latestError/Stacktrace) > 900\nthen substring( $latestError/Stacktrace, 0, 900) + '\n.....'\nelse $latestError/Stacktrace";

	var translation1 = texts.Translation.create(model);
	translation1.languageCode = "en_US";
	translation1.text = "{1}\r\n{2}";

	var text1 = texts.Text.create(model);
	text1.translations.push(translation1);

	var textTemplate1 = microflows.TextTemplate.create(model);
	textTemplate1.arguments.push(templateArgument1);
	textTemplate1.arguments.push(templateArgument2);
	textTemplate1.text = text1;   // Note: for this property a default value is defined.

	var showMessageAction1 = microflows.ShowMessageAction.create(model);
	showMessageAction1.template = textTemplate1;   // Note: for this property a default value is defined.
	showMessageAction1.type = microflows.ShowMessageType.Error;

	var actionActivity2 = microflows.ActionActivity.create(model);
	actionActivity2.relativeMiddlePoint = {"x":230,"y":265};
	actionActivity2.size = {"width":120,"height":60};
	actionActivity2.action = showMessageAction1;

	var endEvent1 = microflows.EndEvent.create(model);
	endEvent1.relativeMiddlePoint = {"x":370,"y":160};
	endEvent1.size = {"width":20,"height":20};

	var templateArgument3 = microflows.TemplateArgument.create(model);
	templateArgument3.expression = "$TestPattern/DisplayPattern";

	var stringTemplate1 = microflows.StringTemplate.create(model);
	stringTemplate1.arguments.push(templateArgument3);
	stringTemplate1.text = "Error while testing pattern: {1}";

	var logMessageAction1 = microflows.LogMessageAction.create(model);
	logMessageAction1.node = "'TestTokenPattern'";
	logMessageAction1.messageTemplate = stringTemplate1;   // Note: for this property a default value is defined.
	logMessageAction1.includeLatestStackTrace = true;

	var actionActivity3 = microflows.ActionActivity.create(model);
	actionActivity3.relativeMiddlePoint = {"x":230,"y":365};
	actionActivity3.size = {"width":120,"height":60};
	actionActivity3.action = logMessageAction1;

	var endEvent2 = microflows.EndEvent.create(model);
	endEvent2.relativeMiddlePoint = {"x":230,"y":435};
	endEvent2.size = {"width":20,"height":20};

	var microflowObjectCollection1 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection1.objects.push(startEvent1);
	microflowObjectCollection1.objects.push(testPattern1);
	microflowObjectCollection1.objects.push(actionActivity1);
	microflowObjectCollection1.objects.push(actionActivity2);
	microflowObjectCollection1.objects.push(endEvent1);
	microflowObjectCollection1.objects.push(actionActivity3);
	microflowObjectCollection1.objects.push(endEvent2);

	var noCase1 = microflows.NoCase.create(model);

	var sequenceFlow1 = microflows.SequenceFlow.create(model);
	sequenceFlow1.originConnectionIndex = 1;
	sequenceFlow1.destinationConnectionIndex = 3;
	sequenceFlow1.originBezierVector = {"width":0,"height":0};
	sequenceFlow1.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow1.caseValue = noCase1;   // Note: for this property a default value is defined.

	var noCase2 = microflows.NoCase.create(model);

	var sequenceFlow2 = microflows.SequenceFlow.create(model);
	sequenceFlow2.originConnectionIndex = 1;
	sequenceFlow2.destinationConnectionIndex = 3;
	sequenceFlow2.originBezierVector = {"width":30,"height":0};
	sequenceFlow2.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow2.caseValue = noCase2;   // Note: for this property a default value is defined.

	var noCase3 = microflows.NoCase.create(model);

	var sequenceFlow3 = microflows.SequenceFlow.create(model);
	sequenceFlow3.originConnectionIndex = 2;
	sequenceFlow3.originBezierVector = {"width":0,"height":30};
	sequenceFlow3.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow3.caseValue = noCase3;   // Note: for this property a default value is defined.
	sequenceFlow3.isErrorHandler = true;

	var noCase4 = microflows.NoCase.create(model);

	var sequenceFlow4 = microflows.SequenceFlow.create(model);
	sequenceFlow4.originConnectionIndex = 2;
	sequenceFlow4.originBezierVector = {"width":0,"height":30};
	sequenceFlow4.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow4.caseValue = noCase4;   // Note: for this property a default value is defined.

	var noCase5 = microflows.NoCase.create(model);

	var sequenceFlow5 = microflows.SequenceFlow.create(model);
	sequenceFlow5.originConnectionIndex = 2;
	sequenceFlow5.originBezierVector = {"width":0,"height":30};
	sequenceFlow5.destinationBezierVector = {"width":0,"height":-15};
	sequenceFlow5.caseValue = noCase5;   // Note: for this property a default value is defined.

	var voidType1 = datatypes.VoidType.create(model);

	var translation2 = texts.Translation.create(model);
	translation2.languageCode = "en_US";

	var text2 = texts.Text.create(model);
	text2.translations.push(translation2);

	var mB_TestThePattern1 = microflows.Microflow.createIn(unit);
	mB_TestThePattern1.name = "MB_TestThePattern";
	mB_TestThePattern1.objectCollection = microflowObjectCollection1;   // Note: for this property a default value is defined.
	mB_TestThePattern1.flows.push(sequenceFlow1);
	mB_TestThePattern1.flows.push(sequenceFlow2);
	mB_TestThePattern1.flows.push(sequenceFlow3);
	mB_TestThePattern1.flows.push(sequenceFlow4);
	mB_TestThePattern1.flows.push(sequenceFlow5);
	mB_TestThePattern1.microflowReturnType = voidType1;
	mB_TestThePattern1.allowedModuleRoles.push(model.findModuleRoleByQualifiedName("MxModelReflection.ModelAdministrator"));
	mB_TestThePattern1.allowedModuleRoles.push(model.findModuleRoleByQualifiedName("MxModelReflection.TokenUser"));
	mB_TestThePattern1.concurrencyErrorMessage = text2;   // Note: for this property a default value is defined.

	sequenceFlow1.origin = startEvent1;
	sequenceFlow1.destination = actionActivity1;

	sequenceFlow2.origin = actionActivity1;
	sequenceFlow2.destination = endEvent1;

	sequenceFlow3.origin = actionActivity1;
	sequenceFlow3.destination = actionActivity2;

	sequenceFlow4.origin = actionActivity2;
	sequenceFlow4.destination = actionActivity3;

	sequenceFlow5.origin = actionActivity3;
	sequenceFlow5.destination = endEvent2;

})