(function (unit, model) {

	/*
	 * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
	 * from unit with id "5823ad58-728a-4f91-bd99-14e688ca1383" of type Microflows$Microflow
	 * in working copy "SoccerSquad"
	 * on 20-12-2024.
	 */

	var startEvent1 = microflows.StartEvent.create(model);
	startEvent1.relativeMiddlePoint = {"x":100,"y":200};
	startEvent1.size = {"width":20,"height":20};

	var objectType1 = datatypes.ObjectType.create(model);
	objectType1.entity = model.findEntityByQualifiedName("ExcelImporter.TemplateDocument");

	var templateDocument1 = microflows.MicroflowParameterObject.create(model);
	templateDocument1.relativeMiddlePoint = {"x":100,"y":110};
	templateDocument1.size = {"width":30,"height":30};
	templateDocument1.name = "TemplateDocument";
	templateDocument1.variableType = objectType1;   // Note: for this property a default value is defined.

	var associationRetrieveSource1 = microflows.AssociationRetrieveSource.create(model);
	associationRetrieveSource1.startVariableName = "TemplateDocument";
	associationRetrieveSource1.association = model.findAssociationBaseByQualifiedName("ExcelImporter.TemplateDocument_Template");

	var retrieveAction1 = microflows.RetrieveAction.create(model);
	retrieveAction1.retrieveSource = associationRetrieveSource1;   // Note: for this property a default value is defined.
	retrieveAction1.outputVariableName = "Template";

	var actionActivity1 = microflows.ActionActivity.create(model);
	actionActivity1.relativeMiddlePoint = {"x":225,"y":200};
	actionActivity1.size = {"width":140,"height":60};
	actionActivity1.action = retrieveAction1;
	actionActivity1.caption = "Retrieve the selected template";
	actionActivity1.autoGenerateCaption = false;

	var expressionSplitCondition1 = microflows.ExpressionSplitCondition.create(model);
	expressionSplitCondition1.expression = "$Template != empty ";

	var exclusiveSplit1 = microflows.ExclusiveSplit.create(model);
	exclusiveSplit1.relativeMiddlePoint = {"x":400,"y":200};
	exclusiveSplit1.size = {"width":130,"height":80};
	exclusiveSplit1.splitCondition = expressionSplitCondition1;   // Note: for this property a default value is defined.
	exclusiveSplit1.caption = "has a template selected";

	var translation1 = texts.Translation.create(model);
	translation1.languageCode = "en_US";
	translation1.text = "No template selected for this file";

	var translation2 = texts.Translation.create(model);
	translation2.languageCode = "nl_NL";
	translation2.text = "Er is geen template geselecteerd voor dit bestand";

	var translation3 = texts.Translation.create(model);
	translation3.languageCode = "en_GB";
	translation3.text = "No template selected for this file";

	var translation4 = texts.Translation.create(model);
	translation4.languageCode = "en_ZA";
	translation4.text = "No template selected for this file";

	var text1 = texts.Text.create(model);
	text1.translations.push(translation1);
	text1.translations.push(translation2);
	text1.translations.push(translation3);
	text1.translations.push(translation4);

	var textTemplate1 = microflows.TextTemplate.create(model);
	textTemplate1.text = text1;   // Note: for this property a default value is defined.

	var showMessageAction1 = microflows.ShowMessageAction.create(model);
	showMessageAction1.template = textTemplate1;   // Note: for this property a default value is defined.
	showMessageAction1.type = microflows.ShowMessageType.Warning;

	var actionActivity2 = microflows.ActionActivity.create(model);
	actionActivity2.relativeMiddlePoint = {"x":400,"y":325};
	actionActivity2.size = {"width":120,"height":60};
	actionActivity2.action = showMessageAction1;

	var endEvent1 = microflows.EndEvent.create(model);
	endEvent1.relativeMiddlePoint = {"x":950,"y":200};
	endEvent1.size = {"width":20,"height":20};

	var basicCodeActionParameterValue1 = microflows.BasicCodeActionParameterValue.create(model);
	basicCodeActionParameterValue1.argument = "$Template";

	var javaActionParameterMapping1 = microflows.JavaActionParameterMapping.create(model);
	javaActionParameterMapping1.parameter = model.findJavaActionParameterByQualifiedName("ExcelImporter.StartImportByTemplate.TemplateObject");
	javaActionParameterMapping1.parameterValue = basicCodeActionParameterValue1;   // Note: for this property a default value is defined.

	var basicCodeActionParameterValue2 = microflows.BasicCodeActionParameterValue.create(model);
	basicCodeActionParameterValue2.argument = "$TemplateDocument";

	var javaActionParameterMapping2 = microflows.JavaActionParameterMapping.create(model);
	javaActionParameterMapping2.parameter = model.findJavaActionParameterByQualifiedName("ExcelImporter.StartImportByTemplate.ImportExcelDoc");
	javaActionParameterMapping2.parameterValue = basicCodeActionParameterValue2;   // Note: for this property a default value is defined.

	var basicCodeActionParameterValue3 = microflows.BasicCodeActionParameterValue.create(model);
	basicCodeActionParameterValue3.argument = "empty";

	var javaActionParameterMapping3 = microflows.JavaActionParameterMapping.create(model);
	javaActionParameterMapping3.parameter = model.findJavaActionParameterByQualifiedName("ExcelImporter.StartImportByTemplate.ImportObjectParameter");
	javaActionParameterMapping3.parameterValue = basicCodeActionParameterValue3;   // Note: for this property a default value is defined.

	var javaActionCallAction1 = microflows.JavaActionCallAction.create(model);
	javaActionCallAction1.errorHandlingType = microflows.ErrorHandlingType.Custom;
	javaActionCallAction1.javaAction = model.findJavaActionByQualifiedName("ExcelImporter.StartImportByTemplate");
	javaActionCallAction1.parameterMappings.push(javaActionParameterMapping1);
	javaActionCallAction1.parameterMappings.push(javaActionParameterMapping2);
	javaActionCallAction1.parameterMappings.push(javaActionParameterMapping3);
	javaActionCallAction1.outputVariableName = "rowCount";

	var actionActivity3 = microflows.ActionActivity.create(model);
	actionActivity3.relativeMiddlePoint = {"x":625,"y":200};
	actionActivity3.size = {"width":180,"height":60};
	actionActivity3.action = javaActionCallAction1;

	var templateArgument1 = microflows.TemplateArgument.create(model);
	templateArgument1.expression = "toString($rowCount)";

	var translation5 = texts.Translation.create(model);
	translation5.languageCode = "en_US";
	translation5.text = "The import is finished.\r\n{1} records have been imported.";

	var translation6 = texts.Translation.create(model);
	translation6.languageCode = "nl_NL";
	translation6.text = "De import is afgerond";

	var translation7 = texts.Translation.create(model);
	translation7.languageCode = "en_GB";
	translation7.text = "The import is finished";

	var translation8 = texts.Translation.create(model);
	translation8.languageCode = "en_ZA";
	translation8.text = "The import is finished";

	var text2 = texts.Text.create(model);
	text2.translations.push(translation5);
	text2.translations.push(translation6);
	text2.translations.push(translation7);
	text2.translations.push(translation8);

	var textTemplate2 = microflows.TextTemplate.create(model);
	textTemplate2.arguments.push(templateArgument1);
	textTemplate2.text = text2;   // Note: for this property a default value is defined.

	var showMessageAction2 = microflows.ShowMessageAction.create(model);
	showMessageAction2.template = textTemplate2;   // Note: for this property a default value is defined.

	var actionActivity4 = microflows.ActionActivity.create(model);
	actionActivity4.relativeMiddlePoint = {"x":815,"y":200};
	actionActivity4.size = {"width":120,"height":60};
	actionActivity4.action = showMessageAction2;

	var endEvent2 = microflows.EndEvent.create(model);
	endEvent2.relativeMiddlePoint = {"x":400,"y":395};
	endEvent2.size = {"width":20,"height":20};

	var annotation1 = microflows.Annotation.create(model);
	annotation1.relativeMiddlePoint = {"x":435,"y":10};
	annotation1.size = {"width":700,"height":150};
	annotation1.caption = "Example how you can implement your own excel import file\r\n\r\nRetrieve a template, this can be  from an association or by the use of a constant or some application settings. How exactly the template is retrieved does not really matter. \r\n\r\nNext, if the template is found the import java action should be executed. This java action has three parameters. The first parameter is the retrieved template, the second parameter is the excel file. The third parameter is an optional parameter this parameter can contain an object in case you want to set the reference from all imported objects to the object from the parameter.\r\n";

	var endEvent3 = microflows.EndEvent.create(model);
	endEvent3.relativeMiddlePoint = {"x":625,"y":505};
	endEvent3.size = {"width":20,"height":20};

	var templateArgument2 = microflows.TemplateArgument.create(model);
	templateArgument2.expression = "$TemplateDocument/Name";

	var templateArgument3 = microflows.TemplateArgument.create(model);
	templateArgument3.expression = "if $latestError/ErrorType = 'excelimporter.reader.readers.ExcelImporterException'\nthen $latestError/Message\nelse $latestError/ErrorType + ' - ' + $latestError/Message";

	var translation9 = texts.Translation.create(model);
	translation9.languageCode = "en_US";
	translation9.text = "The following error occurred when importing document: {1}\r\n{2}";

	var translation10 = texts.Translation.create(model);
	translation10.languageCode = "nl_NL";
	translation10.text = "Er is geen template geselecteerd voor dit bestand";

	var translation11 = texts.Translation.create(model);
	translation11.languageCode = "en_GB";
	translation11.text = "The following error occured when importing document: {1}\r\n{2}";

	var translation12 = texts.Translation.create(model);
	translation12.languageCode = "en_ZA";
	translation12.text = "The following error occured when importing document: {1}\r\n{2}";

	var text3 = texts.Text.create(model);
	text3.translations.push(translation9);
	text3.translations.push(translation10);
	text3.translations.push(translation11);
	text3.translations.push(translation12);

	var textTemplate3 = microflows.TextTemplate.create(model);
	textTemplate3.arguments.push(templateArgument2);
	textTemplate3.arguments.push(templateArgument3);
	textTemplate3.text = text3;   // Note: for this property a default value is defined.

	var showMessageAction3 = microflows.ShowMessageAction.create(model);
	showMessageAction3.template = textTemplate3;   // Note: for this property a default value is defined.
	showMessageAction3.type = microflows.ShowMessageType.Error;

	var actionActivity5 = microflows.ActionActivity.create(model);
	actionActivity5.relativeMiddlePoint = {"x":625,"y":435};
	actionActivity5.size = {"width":180,"height":60};
	actionActivity5.action = showMessageAction3;

	var templateArgument4 = microflows.TemplateArgument.create(model);
	templateArgument4.expression = "$TemplateDocument/Name";

	var stringTemplate1 = microflows.StringTemplate.create(model);
	stringTemplate1.arguments.push(templateArgument4);
	stringTemplate1.text = "The following error occurred when importing document: {1}";

	var logMessageAction1 = microflows.LogMessageAction.create(model);
	logMessageAction1.level = microflows.LogLevel.Error;
	logMessageAction1.node = "'ImportTemplateDocument'";
	logMessageAction1.messageTemplate = stringTemplate1;   // Note: for this property a default value is defined.
	logMessageAction1.includeLatestStackTrace = true;

	var actionActivity6 = microflows.ActionActivity.create(model);
	actionActivity6.relativeMiddlePoint = {"x":625,"y":325};
	actionActivity6.size = {"width":120,"height":60};
	actionActivity6.action = logMessageAction1;

	var microflowObjectCollection1 = microflows.MicroflowObjectCollection.create(model);
	microflowObjectCollection1.objects.push(startEvent1);
	microflowObjectCollection1.objects.push(templateDocument1);
	microflowObjectCollection1.objects.push(actionActivity1);
	microflowObjectCollection1.objects.push(exclusiveSplit1);
	microflowObjectCollection1.objects.push(actionActivity2);
	microflowObjectCollection1.objects.push(endEvent1);
	microflowObjectCollection1.objects.push(actionActivity3);
	microflowObjectCollection1.objects.push(actionActivity4);
	microflowObjectCollection1.objects.push(endEvent2);
	microflowObjectCollection1.objects.push(annotation1);
	microflowObjectCollection1.objects.push(endEvent3);
	microflowObjectCollection1.objects.push(actionActivity5);
	microflowObjectCollection1.objects.push(actionActivity6);

	var noCase1 = microflows.NoCase.create(model);

	var sequenceFlow1 = microflows.SequenceFlow.create(model);
	sequenceFlow1.originConnectionIndex = 1;
	sequenceFlow1.destinationConnectionIndex = 3;
	sequenceFlow1.originBezierVector = {"width":0,"height":0};
	sequenceFlow1.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow1.caseValue = noCase1;   // Note: for this property a default value is defined.

	var enumerationCase1 = microflows.EnumerationCase.create(model);
	enumerationCase1.value = "true";

	var sequenceFlow2 = microflows.SequenceFlow.create(model);
	sequenceFlow2.originConnectionIndex = 1;
	sequenceFlow2.destinationConnectionIndex = 3;
	sequenceFlow2.originBezierVector = {"width":15,"height":0};
	sequenceFlow2.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow2.caseValue = enumerationCase1;   // Note: for this property a default value is defined.

	var noCase2 = microflows.NoCase.create(model);

	var sequenceFlow3 = microflows.SequenceFlow.create(model);
	sequenceFlow3.originConnectionIndex = 1;
	sequenceFlow3.destinationConnectionIndex = 3;
	sequenceFlow3.originBezierVector = {"width":30,"height":0};
	sequenceFlow3.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow3.caseValue = noCase2;   // Note: for this property a default value is defined.

	var enumerationCase2 = microflows.EnumerationCase.create(model);
	enumerationCase2.value = "false";

	var sequenceFlow4 = microflows.SequenceFlow.create(model);
	sequenceFlow4.originConnectionIndex = 2;
	sequenceFlow4.originBezierVector = {"width":0,"height":15};
	sequenceFlow4.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow4.caseValue = enumerationCase2;   // Note: for this property a default value is defined.

	var noCase3 = microflows.NoCase.create(model);

	var sequenceFlow5 = microflows.SequenceFlow.create(model);
	sequenceFlow5.originConnectionIndex = 2;
	sequenceFlow5.originBezierVector = {"width":0,"height":30};
	sequenceFlow5.destinationBezierVector = {"width":0,"height":-15};
	sequenceFlow5.caseValue = noCase3;   // Note: for this property a default value is defined.

	var noCase4 = microflows.NoCase.create(model);

	var sequenceFlow6 = microflows.SequenceFlow.create(model);
	sequenceFlow6.originConnectionIndex = 1;
	sequenceFlow6.destinationConnectionIndex = 3;
	sequenceFlow6.originBezierVector = {"width":30,"height":0};
	sequenceFlow6.destinationBezierVector = {"width":-30,"height":0};
	sequenceFlow6.caseValue = noCase4;   // Note: for this property a default value is defined.

	var noCase5 = microflows.NoCase.create(model);

	var sequenceFlow7 = microflows.SequenceFlow.create(model);
	sequenceFlow7.originConnectionIndex = 1;
	sequenceFlow7.destinationConnectionIndex = 3;
	sequenceFlow7.originBezierVector = {"width":30,"height":0};
	sequenceFlow7.destinationBezierVector = {"width":-15,"height":0};
	sequenceFlow7.caseValue = noCase5;   // Note: for this property a default value is defined.

	var noCase6 = microflows.NoCase.create(model);

	var sequenceFlow8 = microflows.SequenceFlow.create(model);
	sequenceFlow8.originConnectionIndex = 2;
	sequenceFlow8.originBezierVector = {"width":0,"height":30};
	sequenceFlow8.destinationBezierVector = {"width":0,"height":-15};
	sequenceFlow8.caseValue = noCase6;   // Note: for this property a default value is defined.

	var noCase7 = microflows.NoCase.create(model);

	var sequenceFlow9 = microflows.SequenceFlow.create(model);
	sequenceFlow9.originConnectionIndex = 2;
	sequenceFlow9.originBezierVector = {"width":0,"height":30};
	sequenceFlow9.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow9.caseValue = noCase7;   // Note: for this property a default value is defined.
	sequenceFlow9.isErrorHandler = true;

	var noCase8 = microflows.NoCase.create(model);

	var sequenceFlow10 = microflows.SequenceFlow.create(model);
	sequenceFlow10.originConnectionIndex = 2;
	sequenceFlow10.originBezierVector = {"width":0,"height":30};
	sequenceFlow10.destinationBezierVector = {"width":0,"height":-30};
	sequenceFlow10.caseValue = noCase8;   // Note: for this property a default value is defined.

	var voidType1 = datatypes.VoidType.create(model);

	var translation13 = texts.Translation.create(model);
	translation13.languageCode = "en_US";

	var translation14 = texts.Translation.create(model);
	translation14.languageCode = "en_GB";

	var translation15 = texts.Translation.create(model);
	translation15.languageCode = "en_ZA";

	var text4 = texts.Text.create(model);
	text4.translations.push(translation13);
	text4.translations.push(translation14);
	text4.translations.push(translation15);

	var iVK_ImportTemplateDocument1 = microflows.Microflow.createIn(unit);
	iVK_ImportTemplateDocument1.name = "IVK_ImportTemplateDocument";
	iVK_ImportTemplateDocument1.documentation = "Example how you can implement your own excel import file\r\n\r\nRetrieve a template, this can be  from an association or by the use of a constant or some application settings. How exactly the template is retrieved does not really matter. \r\n\r\nNext, if the template is found the import java action should be executed. This java action has three parameters. The first parameter is the retrieved template, the second parameter is the excel file. The third parameter is an optional parameter this parameter can contain an object in case you want to set the reference from all imported objects to the object from the parameter.\r\n";
	iVK_ImportTemplateDocument1.objectCollection = microflowObjectCollection1;   // Note: for this property a default value is defined.
	iVK_ImportTemplateDocument1.flows.push(sequenceFlow1);
	iVK_ImportTemplateDocument1.flows.push(sequenceFlow2);
	iVK_ImportTemplateDocument1.flows.push(sequenceFlow3);
	iVK_ImportTemplateDocument1.flows.push(sequenceFlow4);
	iVK_ImportTemplateDocument1.flows.push(sequenceFlow5);
	iVK_ImportTemplateDocument1.flows.push(sequenceFlow6);
	iVK_ImportTemplateDocument1.flows.push(sequenceFlow7);
	iVK_ImportTemplateDocument1.flows.push(sequenceFlow8);
	iVK_ImportTemplateDocument1.flows.push(sequenceFlow9);
	iVK_ImportTemplateDocument1.flows.push(sequenceFlow10);
	iVK_ImportTemplateDocument1.microflowReturnType = voidType1;
	iVK_ImportTemplateDocument1.allowedModuleRoles.push(model.findModuleRoleByQualifiedName("ExcelImporter.Configurator"));
	iVK_ImportTemplateDocument1.concurrencyErrorMessage = text4;   // Note: for this property a default value is defined.

	sequenceFlow1.origin = startEvent1;
	sequenceFlow1.destination = actionActivity1;

	sequenceFlow2.origin = exclusiveSplit1;
	sequenceFlow2.destination = actionActivity3;

	sequenceFlow3.origin = actionActivity1;
	sequenceFlow3.destination = exclusiveSplit1;

	sequenceFlow4.origin = exclusiveSplit1;
	sequenceFlow4.destination = actionActivity2;

	sequenceFlow5.origin = actionActivity2;
	sequenceFlow5.destination = endEvent2;

	sequenceFlow6.origin = actionActivity3;
	sequenceFlow6.destination = actionActivity4;

	sequenceFlow7.origin = actionActivity4;
	sequenceFlow7.destination = endEvent1;

	sequenceFlow8.origin = actionActivity5;
	sequenceFlow8.destination = endEvent3;

	sequenceFlow9.origin = actionActivity3;
	sequenceFlow9.destination = actionActivity6;

	sequenceFlow10.origin = actionActivity6;
	sequenceFlow10.destination = actionActivity5;

})